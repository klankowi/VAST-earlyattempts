Year = Yearseason_grid[,'Year'],
SEASON.2 = Yearseason_grid[,'season'],
year_season = Yearseason_levels,
Lat = mean(attempt$sampling_data[,'Lat']),
Lon = mean(attempt$sampling_data[,'Lon']),
swept = mean(attempt$sampling_data[,'swept']),
COD_N = 0,
dummy = TRUE)
head(Yearseason_grid)
names(Yearseason_grid)
Yearseason_levels
Year = Yearseason_grid[,'Year']
SEASON.2 = Yearseason_grid[,'season']
SEASON.2
length(SEASON.2)
year_season = Yearseason_levels
Lat = mean(attempt$sampling_data[,'Lat'])
Lon = mean(attempt$sampling_data[,'Lon'])
swept = mean(attempt$sampling_data[,'swept'])
# Make dummy observation for each season-year combination
dummy_data = data.frame(
Year = Yearseason_grid[,'Year'],
SEASON.2 = Yearseason_grid[,'season'],
year_season = Yearseason_levels,
Lat = mean(attempt$sampling_data[,'Lat']),
Lon = mean(attempt$sampling_data[,'Lon']),
swept = mean(attempt$sampling_data[,'swept']),
COD_N = 0,
dummy = TRUE)
# Make dummy observation for each season-year combination
dummy_data = data.frame(
Year = Yearseason_grid[,'Year'],
SEASON.2 = Yearseason_grid[,'season'],
year_season = Yearseason_levels,
Lat = rep(mean(attempt$sampling_data[,'Lat']), length(Yearseason_levels)),
Lon = rep(mean(attempt$sampling_data[,'Lon']), length(Yearseason_levels)),
swept = rep(mean(attempt$sampling_data[,'swept']), length(Yearseason_levels)),
COD_N = rep(0, length(Yearseason_levels)),
dummy = TRUE)
head(dummy_data)
# Combine with sampling data
full_data = rbind(cbind(attempt$sampling_data, dummy = FALSE), dummy_data)
names(attempt$sampling_data)
table(attempt$sampling_data$vessel)
rm(list=ls())
load(here("VAST_Runs/gravel_1stattempt.RData"))
# Load data and quick exploration of structure
# Create true season
source(here("utilities/true_seasons_func.R"))
# For later purposes, assign "true season" by spawning timeframes
attempt$sampling_data$TRUE_SEASON <- NA
for(i in 1:nrow(attempt$sampling_data)){
attempt$sampling_data$TRUE_SEASON[i] <-
true_seasons(attempt$sampling_data$DATE[i])
}
rm(list=ls())
load(here("VAST_Runs/gravel_1stattempt.RData"))
# Load data and quick exploration of structure
# Create true season
source(here("utilities/true_seasons_func.R"))
# For later purposes, assign "true season" by spawning timeframes
for(i in 1:nrow(attempt$sampling_data)){
attempt$sampling_data$SEASON[i] <-
true_seasons(attempt$sampling_data$DATE[i])
}
attempt$sampling_data$SEASON <- as.factor(attempt$sampling_data$SEASON))
attempt$sampling_data$SEASON <- as.factor(attempt$sampling_data$SEASON)
# Set of Years and seasons. The DFO spring survey usually occurs before the NOAA NEFSC spring survey, so ordering accordingly.
Year_set = sort(unique(attempt$sampling_data[,'Year']))
season_set = c("WINTER", "SPRING", "SUMMER", "FALL")
# Create a grid with all unique combinations of seasons and Years and then combine these into one "Year_season" variable
Yearseason_grid = expand.grid("season" = season_set, "Year" = Year_set)
Yearseason_levels = apply(Yearseason_grid[,2:1], MARGIN = 1, FUN = paste,
collapse = "_")
Yearseason_labels = round(Yearseason_grid[,'Year'] +
(as.numeric(factor(Yearseason_grid[,'season'],
levels = season_set))-1)/
length(season_set), digits=1)
# Similar process, but for the observations
Yearseason_i = apply(attempt$sampling_data[,c("Year","TRUE_SEASON")],
MARGIN = 1, FUN = paste, collapse = "_")
# Similar process, but for the observations
Yearseason_i = apply(attempt$sampling_data[,c("Year","SEASON")],
MARGIN = 1, FUN = paste, collapse = "_")
Yearseason_i = factor(Yearseason_i, levels = Yearseason_levels)
# Add the Year_season factor column to our sampling_data data set
attempt$sampling_data$Year_season = Yearseason_i
attempt$sampling_data$SEASON = factor(attempt$sampling_data$SEASON,
levels = season_set)
head(attempt$sampling_data)
# Some last processing steps
attempt$sampling_data = dplyr::select(attempt$sampling_data,
-DATE, -DEPTH, -SURFACE.TEMP,
-BOTTOM.TEMP)
head(attempt$sampling_data)
table(attempt$sampling_data$COND)
# Make dummy observation for each season-year combination
dummy_data = data.frame(
Year = Yearseason_grid[,'Year'],
SEASON = Yearseason_grid[,'season'],
COD_N = rep(0, length(Yearseason_levels)),
cobble_P = rep(mean(attempt$sampling_data[,'cobble_P']),
length(Yearseason_levels)),
gravel_P = rep(mean(attempt$sampling_data[,'gravel_P']),
length(Yearseason_levels)),
mud_P = rep(mean(attempt$sampling_data[,'mud_P']),
length(Yearseason_levels)),
rock_P = rep(mean(attempt$sampling_data[,'rock_P']),
length(Yearseason_levels)),
sand_P = rep(mean(attempt$sampling_data[,'sand_P']),
length(Yearseason_levels)),
COND = rep("SMOOTH",length(Yearseason_levels)),
BATHY.DEPTH = rep(mean(attempt$sampling_data[,'BATHY.DEPTH']),
length(Yearseason_levels)),
oisst = rep(mean(attempt$sampling_data[,'oisst']),
length(Yearseason_levels)),
Lat = rep(mean(attempt$sampling_data[,'Lat']), length(Yearseason_levels)),
Lon = rep(mean(attempt$sampling_data[,'Lon']), length(Yearseason_levels)),
swept = rep(mean(attempt$sampling_data[,'swept']), length(Yearseason_levels)),
vessel = rep(8, length(Yearseason_levels)),
Year_season = Yearseason_levels,
dummy = TRUE)
# Combine with sampling data
full_data = rbind(cbind(attempt$sampling_data, dummy = FALSE), dummy_data)
# Create sample data
samp_dat = data.frame(
"year_season" = as.numeric(full_data$year_season)-1,
"Lat" = full_data$Lat,
"Lon" = full_data$Lon,
"COD_N" = full_data$COD_N,
"Swept" = full_data$swept,
"Dummy" = full_data$dummy )
# Create sample data
samp_dat = data.frame(
"year_season" = as.numeric(full_data$Year_season)-1,
"Lat" = full_data$Lat,
"Lon" = full_data$Lon,
"COD_N" = full_data$COD_N,
"Swept" = full_data$swept,
"Dummy" = full_data$dummy )
# Covariate data. Note here, case sensitive!
cov_dat = data.frame(
"Year" = as.numeric(full_data$Year_season)-1,
"Year_Cov" = factor(full_data$Year, levels = year_set),
"Season" = full_data$SEASON,
"Lat" = full_data$Lat,
"Lon" = full_data$Lon )
# Covariate data. Note here, case sensitive!
cov_dat = data.frame(
"Year" = as.numeric(full_data$Year_season)-1,
"Year_Cov" = factor(full_data$Year, levels = Year_set),
"Season" = full_data$SEASON,
"Lat" = full_data$Lat,
"Lon" = full_data$Lon )
# Inspect
table("year_season"=cov_dat$Year, "Actual_year"=cov_dat$Year_Cov)
table("year_season"=cov_dat$Year, "Actual_season"=cov_dat$SEASON)
table("year_season"=cov_dat$Year, "Actual_season"=cov_dat$Season)
table(full_data$Year_season)
# Inspect
table("year_season"=cov_dat$Year, "Actual_year"=cov_dat$Year_Cov)
table("year_season"=cov_dat$Year, "Actual_season"=cov_dat$Season)
ta <- table(full_data$Year_season)
ta[ta == 1]
ta <- subset(attempt$sampling_data, Year_season=='2022_SUMMER')
ta
ta <- subset(full_data, Year_season=='2022_SUMMER')
ta
#### New stuff ####
setwd(here("VAST_Runs/Seasonal_Covar"))
attempt$strata.limits
# Make settings
settings = make_settings(n_x = 100,
Region = attempt$Region,
strata.limits = attempt$strata.limits,
purpose = "index2",
FieldConfig = c("Omega1" = 1, "Epsilon1" = 1, "Omega2" = 1, "Epsilon2" = 1),
RhoConfig = c("Beta1" = 3, "Beta2" = 3, "Epsilon1" = 4, "Epsilon2" = 4),
ObsModel = c(1, 1),
bias.correct = FALSE,
Options = c('treat_nonencounter_as_zero' = TRUE) )
head(attempt$sampling_data)
# Creating model formula
formula_use = ~ Season + Year_Cov
# Implement corner constraint for linear effect but not spatially varying effect:
# * one level for each term is 2 (just spatially varying)
# * all other levels for each term is 3 (spatialy varying plus linear effect)
X1config_cp_use = matrix( c(2, rep(3,nlevels(cov_dat$Season)-1), 2, rep(3,nlevels(cov_dat$Year_Cov)-1) ), nrow=1 )
X2config_cp_use = matrix( c(2, rep(3,nlevels(cov_dat$Season)-1), 2, rep(3,nlevels(cov_dat$Year_Cov)-1) ), nrow=1 )
head(samp_dat)
fit_orig = fit_model("settings" = settings,
"Lat_i" = samp_dat[, 'Lat'],
"Lon_i" = samp_dat[, 'Lon'],
"t_i" = samp_dat[, 'year_season'],
"b_i" = samp_dat[, 'COD_N'],
"a_i" = samp_dat[, 'Swept'],
"X1config_cp" = X1config_cp_use,
"X2config_cp" = X2config_cp_use,
"covariate_data" = cov_dat,
"X1_formula" = formula_use,
"X2_formula" = formula_use,
"X_contrasts" = list(Season = contrasts(cov_dat$Season, contrasts = FALSE), Year_Cov = contrasts(cov_dat$Year_Cov, contrasts = FALSE)),
"run_model" = FALSE,
"PredTF_i" = samp_dat[, 'Dummy'] )
attempt$strata.limits
attempt$Region
# Make settings
settings = make_settings(n_x = 100,
Region = "User",
strata.limits = attempt$strata.limits,
purpose = "index2",
FieldConfig = c("Omega1" = 1, "Epsilon1" = 1, "Omega2" = 1, "Epsilon2" = 1),
RhoConfig = c("Beta1" = 3, "Beta2" = 3, "Epsilon1" = 4, "Epsilon2" = 4),
ObsModel = c(1, 1),
bias.correct = FALSE,
Options = c('treat_nonencounter_as_zero' = TRUE) )
# Creating model formula
formula_use = ~ Season + Year_Cov
# Implement corner constraint for linear effect but not spatially varying effect:
# * one level for each term is 2 (just spatially varying)
# * all other levels for each term is 3 (spatialy varying plus linear effect)
X1config_cp_use = matrix( c(2, rep(3,nlevels(cov_dat$Season)-1), 2, rep(3,nlevels(cov_dat$Year_Cov)-1) ), nrow=1 )
X2config_cp_use = matrix( c(2, rep(3,nlevels(cov_dat$Season)-1), 2, rep(3,nlevels(cov_dat$Year_Cov)-1) ), nrow=1 )
fit_orig = fit_model("settings" = settings,
"Lat_i" = samp_dat[, 'Lat'],
"Lon_i" = samp_dat[, 'Lon'],
"t_i" = samp_dat[, 'year_season'],
"b_i" = samp_dat[, 'COD_N'],
"a_i" = samp_dat[, 'Swept'],
"X1config_cp" = X1config_cp_use,
"X2config_cp" = X2config_cp_use,
"covariate_data" = cov_dat,
"X1_formula" = formula_use,
"X2_formula" = formula_use,
"X_contrasts" = list(Season = contrasts(cov_dat$Season, contrasts = FALSE), Year_Cov = contrasts(cov_dat$Year_Cov, contrasts = FALSE)),
"run_model" = FALSE,
"PredTF_i" = samp_dat[, 'Dummy'] )
# Make settings
# Make settings (turning off bias.correct to save time for example)
settings = make_settings( n_x = 200,
Region='User',
purpose = "index2",
bias.correct = FALSE)
settings = make_settings(n_x = 200,
Region = "User",
strata.limits = attempt$strata.limits,
purpose = "index2",
FieldConfig = c("Omega1" = 1, "Epsilon1" = 1, "Omega2" = 1, "Epsilon2" = 1),
RhoConfig = c("Beta1" = 3, "Beta2" = 3, "Epsilon1" = 4, "Epsilon2" = 4),
ObsModel = c(1, 1),
bias.correct = FALSE,
Options = c('treat_nonencounter_as_zero' = TRUE) )
# Creating model formula
formula_use = ~ Season + Year_Cov
# Implement corner constraint for linear effect but not spatially varying effect:
# * one level for each term is 2 (just spatially varying)
# * all other levels for each term is 3 (spatialy varying plus linear effect)
X1config_cp_use = matrix( c(2, rep(3,nlevels(cov_dat$Season)-1), 2, rep(3,nlevels(cov_dat$Year_Cov)-1) ), nrow=1 )
X2config_cp_use = matrix( c(2, rep(3,nlevels(cov_dat$Season)-1), 2, rep(3,nlevels(cov_dat$Year_Cov)-1) ), nrow=1 )
head(attempt$sampling_data)
attempt$sampling_data[attempt$sampling_data$Year_season == '2022_SUMMER',]
head(samp_dat)
fit_orig = fit_model("settings" = settings,
"Lat_i" = samp_dat[, 'Lat'],
"Lon_i" = samp_dat[, 'Lon'],
"t_i" = samp_dat[, 'year_season'],
"b_i" = samp_dat[, 'COD_N'],
"a_i" = samp_dat[, 'Swept'],
"X1config_cp" = X1config_cp_use,
"X2config_cp" = X2config_cp_use,
"covariate_data" = cov_dat,
"X1_formula" = formula_use,
"X2_formula" = formula_use,
"X_contrasts" = list(Season = contrasts(cov_dat$Season, contrasts = FALSE), Year_Cov = contrasts(cov_dat$Year_Cov, contrasts = FALSE)),
"run_model" = FALSE,
"PredTF_i" = samp_dat[, 'Dummy'],
input_grid= user_region)
user_region
head(user_region)
head(samp_dat)
head(attempt$sampling_data)
fit_orig = fit_model("settings" = settings,
"Lat_i" = samp_dat[, 'Lat'],
"Lon_i" = samp_dat[, 'Lon'],
"t_i" = samp_dat[, 'year_season'],
"b_i" = samp_dat[, 'COD_N'],
"a_i" = samp_dat[, 'Swept'],
"X1config_cp" = X1config_cp_use,
"X2config_cp" = X2config_cp_use,
"covariate_data" = cov_dat,
"X1_formula" = formula_use,
"X2_formula" = formula_use,
"X_contrasts" = list(Season = contrasts(cov_dat$Season, contrasts = FALSE), Year_Cov = contrasts(cov_dat$Year_Cov, contrasts = FALSE)),
"run_model" = FALSE,
"PredTF_i" = samp_dat[, 'Dummy'],
input_grid= user_region)
attempt$strata.limits
# Clear workspace
rm(list=ls())
# Load libraries
library(VAST)
library(sf)
library(tidyverse)
library(rgdal)
library(here)
# Set GGplot auto theme
theme_set(theme(panel.grid.major = element_line(color='lightgray'),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(color='black', size=1, fill=NA),
legend.position = "bottom",
axis.text.x=element_text(size=12),
axis.text.y=element_text(size=12),
axis.title.x=element_text(size=14),
axis.title.y=element_text(size=14, angle=90, vjust=2),
plot.title=element_text(size=14, hjust = 0, vjust = 1.2),
plot.caption=element_text(hjust=0, face='italic', size=12)))
#### Fix degree sign problem ####
xlabs <- seq(-77, -66, 2)
ylabs <- seq(36, 46, 2)
## Add spatial grid
user_region <- readRDS(here('data/RData_Storage/user_region_all.rds'))
## Add stock limits
stox <- readOGR(here("data/GIS/codstox.shp"))
stox.sf <- st_as_sf(stox)
stox.df <- sfheaders::sf_to_df(stox.sf, fill=T)
# Plot for posterity
ggplot(ecodata::coast) +
geom_sf(data=stox.sf, col='black',
aes(fill=STOCK)) +
geom_sf() +
coord_sf(xlim=c(-76, -65), ylim=c(36, 46))
## Set limits by OBJECTID
EGOM <- unique(as.numeric(stox.df$OBJECTID[stox.df$STOCK == 'EGOM']))
WGOM <- unique(as.numeric(stox.df$OBJECTID[stox.df$STOCK == 'WGOM']))
GBK <- unique(as.numeric(stox.df$OBJECTID[stox.df$STOCK == 'GBK']))
SNE <- unique(as.numeric(stox.df$OBJECTID[stox.df$STOCK == 'SNE']))
stox.limits <- as.list(c("Allstox" = NA,
"EGOM" = EGOM,
"WGOM" = WGOM,
"GBK" = GBK,
"SNE" = SNE))
stox.limits$Allstox <- seq(1:4)
rm(stox.df, stox.sf, EGOM, GBK, SNE, WGOM)
## Add sampling data and covars
surveys <- readRDS(here("data/RData_storage/agg_stn_all_OISST.rds"))
# Assign season to rows with NA season
good.seas <- subset(surveys, is.na(SEASON)==FALSE)
na.seas <- subset(surveys, is.na(SEASON)==TRUE)
table(na.seas$SURVEY)
na.gso <- subset(na.seas, SURVEY =='GSO_Trawl')
na.rid <- subset(na.seas, SURVEY == 'RIDEM_Trawl')
na.gso$SEASON <- 'FALL'
months.winter <- c('01', '02')
months.spring <- c('03', '04', '05', '06')
months.summer <- c('07', '08')
months.fall   <- c('09', '10', '11', '12')
# Assign season to rows with NA season
source(here("utilities/true_season_func.R"))
# Assign season to rows with NA season
source(here("utilities/true_seasons_func.R"))
surveys$SEASON <- true_seasons(surveys$DATE)
for(i in 1:nrow(surveys)){
surveys$SEASON[i] <- true_seasons(surveys$DATE[i])
}
table(surveys$SEASON)
table(surveys$month, surveys$SEASON)
ex <- sfheaders::sf_to_df(surveys, fill=T)
ex2 <- ex %>%
dplyr::select(-c(SALINITY, BOTTOM.TYPE, cobble_V,
gravel_V, rock_V, mud_V, sand_V, month, day, yrmody, declon,
declat, sfg_id, point_id, STRATUM, COD_KG, HAUL_ID))
ex2 <- subset(ex2, is.na(COD_N)==FALSE)
ex2 <- ex2[with(ex2, order(DATE)),]
row.names(ex2) <- NULL
# Change data structure
ex2$SEASON <- as.factor(ex2$SEASON)
ex2$COND <- as.factor(ex2$COND)
ex2$SURVEY <- as.factor(ex2$SURVEY)
ex2$STOCK <- as.factor(ex2$STOCK)
ex2$COD_N <- as_units(ex2$COD_N, "counts")
ex2$swept <- as_units(1, unitless)
ex2$VESSEL <- as.integer(ex2$SURVEY) - 1
ex2$SURVEY <- NULL
head(ex2)
ex2 <- ex %>%
dplyr::select(-c(SALINITY, BOTTOM.TYPE, cobble_V,
gravel_V, rock_V, mud_V, sand_V, month, day, yrmody, declon,
declat, sfg_id, point_id, STRATUM, COD_KG, HAUL_ID,
DEPTH, SURFACE.TEMP, BOTTOM.TEMP, TRUE_SEASON))
head(ex2)
ex2 <- ex %>%
dplyr::select(-c(SALINITY, BOTTOM.TYPE, cobble_V,
gravel_V, rock_V, mud_V, sand_V, month, day, yrmody, declon,
declat, sfg_id, point_id, STRATUM, COD_KG, HAUL_ID,
DEPTH, SURFACE.TEMP, BOTTOM.TEMP, TRUE_SEASON))
ex2 <- subset(ex2, is.na(COD_N)==FALSE)
ex2 <- ex2[with(ex2, order(DATE)),]
row.names(ex2) <- NULL
# Change data structure
ex2$SEASON <- as.factor(ex2$SEASON)
ex2$COND <- as.factor(ex2$COND)
ex2$SURVEY <- as.factor(ex2$SURVEY)
ex2$STOCK <- as.factor(ex2$STOCK)
ex2$COD_N <- as_units(ex2$COD_N, "counts")
ex2$swept <- as_units(1, unitless)
ex2$VESSEL <- as.integer(ex2$SURVEY) - 1
ex2$SURVEY <- NULL
head(ex2)
names(ex2)
# Check structure
names(ex2) <- c('Year', names(ex2[2:13]), 'Lon', 'Lat', 'swept', 'vessel')
str(ex2)
rm(surveys, ex, good.seas, na.gso, na.seas, months.fall, months.spring,
months.summer, months.winter, i, na.rid)
# Pull covariate data
covars <- dplyr::select(ex2,
Year, Lon, Lat, cobble_P, gravel_P, mud_P, rock_P,
sand_P, COND, BATHY.DEPTH, oisst)
## Combine to VAST list format
attempt <- vector(mode="list", length=3)
names(attempt) <- c('sampling_data', 'Region', 'strata.limits')
attempt[[1]] <- ex2
attempt[[2]] <- user_region
attempt[[3]] <- stox.limits
stox.limits
attempt["sampling_data"]
attempt[[3]] <- stox.limits
stox.limits
# Rename stocks
for(i in 1:nrow(attempt["sampling_data"])){
if(attempt$sampling_data$STOCK[i] == 'EGOM'){
attempt$sampling_data$STOCK[i] <- 1
}
if(attempt$sampling_data$STOCK[i] == 'WGOM'){
attempt$sampling_data$STOCK[i] <- 4
}
if(attempt$sampling_data$STOCK[i] == 'GBK'){
attempt$sampling_data$STOCK[i] <- 2
}
if(attempt$sampling_data$STOCK[i] == 'SNE'){
attempt$sampling_data$STOCK[i] <- 3
}
}
# Rename stocks
for(i in 1:nrow(attempt$sampling_data)){
if(attempt$sampling_data$STOCK[i] == 'EGOM'){
attempt$sampling_data$STOCK[i] <- 1
}
if(attempt$sampling_data$STOCK[i] == 'WGOM'){
attempt$sampling_data$STOCK[i] <- 4
}
if(attempt$sampling_data$STOCK[i] == 'GBK'){
attempt$sampling_data$STOCK[i] <- 2
}
if(attempt$sampling_data$STOCK[i] == 'SNE'){
attempt$sampling_data$STOCK[i] <- 3
}
}
summary(attempt$sampling_data$STOCK)
attempt[[1]] <- ex2
summary(attempt$sampling_data$STOCK)
attempt$sampling_data$STOCK <- as.numeric(attempt$sampling_data$STOCK)
summary(attempt$sampling_data$STOCK)
table(attempt$sampling_data$STOCK)
# Rename stocks
attempt$sampling_data$STRATA <- as.numeric(attempt$sampling_data$STOCK)
attempt$sampling_data$STOCK <- NULL
# Remove intermediates
rm(stox, stox.limits, fall, i , spring, summer, winter)
# Make settings (turning off bias.correct to save time for example)
settings = make_settings( n_x = 200,
Region='User',
purpose = "index2",
bias.correct = FALSE)
setwd(here("VAST_Runs/Gravel_Dens_Covar2"))
# Make settings (turning off bias.correct to save time for example)
settings = make_settings( n_x = 200,
Region='User',
purpose = "index2",
bias.correct = FALSE)
# Pull covariate data
covars <- dplyr::select(ex2,
Year, Lon, Lat, cobble_P, gravel_P, mud_P, rock_P,
sand_P)
# Run model
fit = fit_model( settings = settings,
Lat_i = attempt$sampling_data[,'Lat'],
Lon_i = attempt$sampling_data[,'Lon'],
t_i = attempt$sampling_data[,'Year'],
b_i = attempt$sampling_data[,'COD_N'],
a_i = attempt$sampling_data[,'swept'],
input_grid=user_region,
X1_formula = ~gravel_P + cobble_P + rock_P + sand_P + mud_P,
covariate_data=covars)
# Make settings (turning off bias.correct to save time for example)
settings = make_settings( n_x = 200,
Region='User',
purpose = "index2",
bias.correct = FALSE,
strata.limits = attempt$strata.limits)
# Run model
fit = fit_model( settings = settings,
Lat_i = attempt$sampling_data[,'Lat'],
Lon_i = attempt$sampling_data[,'Lon'],
t_i = attempt$sampling_data[,'Year'],
b_i = attempt$sampling_data[,'COD_N'],
a_i = attempt$sampling_data[,'swept'],
input_grid=user_region,
X1_formula = ~gravel_P + cobble_P + rock_P + sand_P + mud_P,
covariate_data=covars)
attempt$strata.limits
