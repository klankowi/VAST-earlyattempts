a_i = rep(0.0112 * 1.852^2, nrow(dat_use)),
v_i = rep("missing", nrow(dat_use)),
extrapolation_list = vast_extrap_info,
input_grid = vast_extrap_info$Data_Extrap,
run_model = TRUE
)
setwd("C:/Users/klankowicz/Desktop/VAST_Examples/Andrew_Code")
getwd()
#####
## Making settings
#####
# Make settings (turning off bias.correct to save time for example)
settings = make_settings( n_x = 75,
Region = "User",
purpose = "index2",
bias.correct = FALSE,
knot_method = "grid",
strata.limits = strata_use)
######
## Fit Model
######
# Run model while providing the previously made extrapolation grid and
# extrapolation info
fit_base = fit_model(
settings = settings,
Lat_i = dat_use[, "LATITUDE"],
Lon_i = dat_use[, "LONGITUDE"],
t_i = dat_use[, "YEAR"],
c_i = rep(0, nrow(dat_use)),
b_i = dat_use[, "CATCH_WT_CAL"],
a_i = rep(0.0112 * 1.852^2, nrow(dat_use)),
v_i = rep("missing", nrow(dat_use)),
extrapolation_list = vast_extrap_info,
input_grid = vast_extrap_info$Data_Extrap,
run_model = TRUE
)
plot(fit_base)
rm(list=ls())
library(tidyverse)
library(VAST)
library(ggplot2)
library(sf)
devtools::source_url(
"https://raw.github.com/aallyn/TargetsSDM/main/R/vast_functions.r"
)
# Load in data
load_example(data_set = "GB_fall_haddock")
dat_use<- georges_bank_haddock_fall
plot(dat_use$LONGITUDE, dat_use$LATITUDE)
# Make some example polygons
dat_sf <- st_as_sf(dat_use, coords = c("LONGITUDE", "LATITUDE"),
crs = 4326)
all_poly_sfc <- st_sfc(st_polygon(list(cbind(c(st_bbox(dat_sf)["xmin"],
st_bbox(dat_sf)["xmin"],
st_bbox(dat_sf)["xmax"],
st_bbox(dat_sf)["xmax"],
st_bbox(dat_sf)["xmin"]),
c(st_bbox(dat_sf)["ymin"],
st_bbox(dat_sf)["ymax"],
st_bbox(dat_sf)["ymax"],
st_bbox(dat_sf)["ymin"],
st_bbox(dat_sf)["ymin"])))),
crs = 4326)
all_poly_use<- st_sf(data.frame("Region" = "All", geom = all_poly_sfc))
dat_sf.sf <- st_as_sf(dat_sf, coords=c("LONGITUDE", "LATITUDE"))
st_crs(dat_sf.sf) <- st_crs(all_poly_use)
ggplot() +
geom_sf(data=all_poly_use, fill='aquamarine3') +
geom_sf(data=dat_sf.sf, col=alpha("black", 0.2))
reg1_sfc<- st_sfc(st_polygon(list(cbind(c(-70, -70, -68, -68, -70),
c(40, 43, 43, 40, 40)))),
crs = 4326)
reg1_use<- st_sf(data.frame("Region" = "Reg1", geom = reg1_sfc))
reg2_sfc<- st_sfc(st_polygon(list(cbind(c(-68, -68, -65, -65, -68),
c(40, 43, 43, 40, 40)))), crs = 4326)
reg2_use<- st_sf(data.frame("Region" = "Reg2", geom = reg2_sfc))
index_shape_use <- bind_rows(all_poly_use,
reg1_use, reg2_use)
index_shape_use
# Brain dead, apologies for horrible color choices!
ggplot() +
geom_sf(data = reg1_use, fill = alpha("blue", 0.2)) +
geom_sf(data = reg2_use, fill = alpha("aquamarine3", 0.2)) +
geom_sf(data = all_poly_use, fill = alpha("chocolate3", 0.8)) +
geom_sf(data = dat_sf)
head(index_shape_use)
reg1_use
reg1_sfc
all_sfc <- st_sfc(st_polygon(list(cbindc((-70, -70, -65, -65, -70),
all_sfc <- st_sfc(st_polygon(list(cbind(c(-70, -70, -65, -65, -70),
c(40, 43, 43, 40, 40)))),
crs=4326)
all_use <- st_sf(data.frame("Region" = "All", geom = all_sfc))
index_shape_use <- bind_rows(all_use,
reg1_use, reg2_use)
index_shape_use
# Brain dead, apologies for horrible color choices!
ggplot() +
geom_sf(data = reg1_use, fill = alpha("blue", 0.2)) +
geom_sf(data = reg2_use, fill = alpha("aquamarine3", 0.2)) +
geom_sf(data = all_use, fill = alpha("chocolate3", 0.8)) +
geom_sf(data = dat_sf)
# Brain dead, apologies for horrible color choices!
ggplot() +
geom_sf(data = reg1_use, fill = alpha("blue", 0.2)) +
geom_sf(data = reg2_use, fill = alpha("aquamarine3", 0.2)) +
geom_sf(data = all_use, fill = alpha("chocolate3", 0.2)) +
geom_sf(data = dat_sf)
#####
## Make extrapolation grid
#####
vast_grid <- vast_make_extrap_grid(region_shapefile = all_poly_use,
index_shapes = index_shape_use,
cell_size = 10000)
table(vast_grid$Region)
grid_sf<- st_as_sf(vast_grid, coords = c("Lon", "Lat"), crs = 4326)
ggplot() +
geom_sf(data = grid_sf, aes(color = Region)) +
facet_wrap(~Region) +
scale_color_manual(values = c(#"All" = "chocolate3",
"Reg1" = "blue",
"Reg2" = "aquamarine3"))
ggplot() +
geom_sf(data = grid_sf, aes(color = Region)) +
facet_wrap(~Region) +
scale_color_manual(values = c("All" = "chocolate3",
"Reg1" = "blue",
"Reg2" = "aquamarine3"))
#####
## Making extrapolation info
#####
## I think this is the source of the problem as I had forgotten that I had to
## modify the `make_extrapolation_info` function so that it would accommodate the
## shapefiles. Jim and I have talked about how to get this edit formally
## included in the VAST package and I just haven't had time to really push it
## forward.
strata_use <- data.frame("STRATA" = c(#"All",
"Reg1", "Reg2"))
#####
## Making extrapolation info
#####
## I think this is the source of the problem as I had forgotten that I had to
## modify the `make_extrapolation_info` function so that it would accommodate the
## shapefiles. Jim and I have talked about how to get this edit formally
## included in the VAST package and I just haven't had time to really push it
## forward.
strata_use <- data.frame("STRATA" = c("All",
"Reg1", "Reg2"))
vast_extrap_info<- make_extrapolation_info_aja(Region = "User",
strata.limits = strata_use,
input_grid = vast_grid,
index_shapes = index_shape_use)
#####
## Making settings
#####
# Make settings (turning off bias.correct to save time for example)
settings = make_settings( n_x = 75,
Region = "User",
purpose = "index2",
bias.correct = FALSE,
knot_method = "grid",
strata.limits = strata_use)
######
## Fit Model
######
# Run model while providing the previously made extrapolation grid and
# extrapolation info
fit_base = fit_model(
settings = settings,
Lat_i = dat_use[, "LATITUDE"],
Lon_i = dat_use[, "LONGITUDE"],
t_i = dat_use[, "YEAR"],
c_i = rep(0, nrow(dat_use)),
b_i = dat_use[, "CATCH_WT_CAL"],
a_i = rep(0.0112 * 1.852^2, nrow(dat_use)),
v_i = rep("missing", nrow(dat_use)),
extrapolation_list = vast_extrap_info,
input_grid = vast_extrap_info$Data_Extrap,
run_model = TRUE
)
strata_use
table(vast_extrap_info$Data_Extrap$STRATA)
#####
## Making settings
#####
# Make settings (turning off bias.correct to save time for example)
settings = make_settings( n_x = 75,
Region = "User",
purpose = "index2",
bias.correct = FALSE,
#knot_method = "grid",
strata.limits = strata_use)
######
## Fit Model
######
# Run model while providing the previously made extrapolation grid and
# extrapolation info
fit_base = fit_model(
settings = settings,
Lat_i = dat_use[, "LATITUDE"],
Lon_i = dat_use[, "LONGITUDE"],
t_i = dat_use[, "YEAR"],
c_i = rep(0, nrow(dat_use)),
b_i = dat_use[, "CATCH_WT_CAL"],
a_i = rep(0.0112 * 1.852^2, nrow(dat_use)),
v_i = rep("missing", nrow(dat_use)),
extrapolation_list = vast_extrap_info,
input_grid = vast_extrap_info$Data_Extrap,
run_model = TRUE
)
######
## Fit Model
######
# Run model while providing the previously made extrapolation grid and
# extrapolation info
fit_base = fit_model(
settings = settings,
Lat_i = dat_use[, "LATITUDE"],
Lon_i = dat_use[, "LONGITUDE"],
t_i = dat_use[, "YEAR"],
c_i = rep(0, nrow(dat_use)),
b_i = dat_use[, "CATCH_WT_CAL"],
a_i = rep(0.0112 * 1.852^2, nrow(dat_use)),
v_i = rep("missing", nrow(dat_use)),
extrapolation_list = vast_extrap_info,
#input_grid = vast_extrap_info$Data_Extrap,
run_model = TRUE
)
######
## Fit Model
######
# Run model while providing the previously made extrapolation grid and
# extrapolation info
fit_base = fit_model(
settings = settings,
Lat_i = dat_use[, "LATITUDE"],
Lon_i = dat_use[, "LONGITUDE"],
t_i = dat_use[, "YEAR"],
c_i = rep(0, nrow(dat_use)),
b_i = dat_use[, "CATCH_WT_CAL"],
a_i = rep(0.0112 * 1.852^2, nrow(dat_use)),
v_i = rep("missing", nrow(dat_use)),
#extrapolation_list = vast_extrap_info,
input_grid = vast_extrap_info$Data_Extrap,
run_model = TRUE
)
######
## Fit Model
######
# Run model while providing the previously made extrapolation grid and
# extrapolation info
fit_base = fit_model(
settings = settings,
Lat_i = dat_use[, "LATITUDE"],
Lon_i = dat_use[, "LONGITUDE"],
t_i = dat_use[, "YEAR"],
c_i = rep(0, nrow(dat_use)),
b_i = dat_use[, "CATCH_WT_CAL"],
a_i = rep(0.0112 * 1.852^2, nrow(dat_use)),
v_i = rep("missing", nrow(dat_use)),
extrapolation_list = vast_extrap_info,
#input_grid = vast_extrap_info$Data_Extrap,
run_model = TRUE
)
fit_model
?fit_model
?make_extrapolation_info
head(vast_grid)
######
## Fit Model
######
# Run model while providing the previously made extrapolation grid and
# extrapolation info
fit_base = fit_model(
settings = settings,
Lat_i = dat_use[, "LATITUDE"],
Lon_i = dat_use[, "LONGITUDE"],
t_i = dat_use[, "YEAR"],
c_i = rep(0, nrow(dat_use)),
b_i = dat_use[, "CATCH_WT_CAL"],
a_i = rep(0.0112 * 1.852^2, nrow(dat_use)),
v_i = rep("missing", nrow(dat_use)),
#extrapolation_list = vast_extrap_info,
input_grid = vast_grid,
run_model = TRUE
)
######
## Fit Model
######
# Run model while providing the previously made extrapolation grid and
# extrapolation info
fit_base = fit_model(
# Settings info
settings = settings,
# Sample info
Lat_i = dat_use[, "LATITUDE"],
Lon_i = dat_use[, "LONGITUDE"],
t_i = dat_use[, "YEAR"],
c_i = rep(0, nrow(dat_use)),
b_i = dat_use[, "CATCH_WT_CAL"],
a_i = rep(0.0112 * 1.852^2, nrow(dat_use)),
v_i = rep("missing", nrow(dat_use)),
# Spatial info
Region = "User",
strata.limits = strata_use,
input_grid = vast_grid,
index_shapes = index_shape_use,
# Running info
run_model = TRUE
)
settings
head(dat_use)
dat_use_regions <- dat_use
dat_use$Region <- "All"
dat_use_regions$Region <- NA
reg1_use
# Pull regions for regional data
dat_use_regions_sf <- st_as_sf(dat_use_regions, coords=c("LONGITUDE",
"LATITUDE"))
st_crs(dat_use_regions_sf) <- "EPSG:4326"
head(dat_use)
rm(list=ls())
library(tidyverse)
library(VAST)
library(ggplot2)
library(sf)
devtools::source_url("https://raw.github.com/aallyn/TargetsSDM/main/R/vast_functions.r")
# Load in data
load_example(data_set = "GB_fall_haddock")
dat_use<- georges_bank_haddock_fall
plot(dat_use$LONGITUDE, dat_use$LATITUDE)
# Make some example polygons
dat_sf <- st_as_sf(dat_use, coords = c("LONGITUDE", "LATITUDE"), crs = 4326)
all_poly_sfc <- st_sfc(st_polygon(list(cbind(c(st_bbox(dat_sf)["xmin"], st_bbox(dat_sf)["xmin"], st_bbox(dat_sf)["xmax"], st_bbox(dat_sf)["xmax"], st_bbox(dat_sf)["xmin"]), c(st_bbox(dat_sf)["ymin"], st_bbox(dat_sf)["ymax"], st_bbox(dat_sf)["ymax"], st_bbox(dat_sf)["ymin"], st_bbox(dat_sf)["ymin"])))), crs = 4326)
all_poly_use<- st_sf(data.frame("Region" = "All", geom = all_poly_sfc))
all_poly_use
reg1_sfc<- st_sfc(st_polygon(list(cbind(c(-70, -70, -68, -68, -70), c(40, 43, 43, 40, 40)))), crs = 4326)
reg1_use<- st_sf(data.frame("Region" = "Reg1", geom = reg1_sfc))
reg2_sfc<- st_sfc(st_polygon(list(cbind(c(-68, -68, -65, -65, -68), c(40, 43, 43, 40, 40)))), crs = 4326)
reg2_use<- st_sf(data.frame("Region" = "Reg2", geom = reg2_sfc))
index_shape_use <- bind_rows(all_poly_use, reg1_use, reg2_use)
index_shape_use
# Brain dead, apologies for horrible color choices!
ggplot() +
geom_sf(data = dat_sf) +
geom_sf(data = all_poly, fill = NA, color = "red") +
geom_sf(data = reg1_use, fill = NA, color = "blue") +
geom_sf(data = reg2_use, fill = NA, color = "green")
# Brain dead, apologies for horrible color choices!
ggplot() +
geom_sf(data = dat_sf) +
geom_sf(data = all_poly_use, fill = NA, color = "red") +
geom_sf(data = reg1_use, fill = NA, color = "blue") +
geom_sf(data = reg2_use, fill = NA, color = "green")
vast_make_extrap_grid()
vast_make_extrap_grid
make_extrapolation_info(Region = "User",
strata.limits = strata_use,
create_strata_per_region = TRUE,
input_grid = vast_grid,
grid_dim_km = c(1,1))
?VAST
?make_extrapolation_info
#####
## Make extrapolation grid
#####
vast_grid <- vast_make_extrap_grid(region_shapefile = all_poly_use,
index_shapes = index_shape_use,
cell_size = 10000)
table(vast_grid$Region)
grid_sf<- st_as_sf(vast_grid, coords = c("Lon", "Lat"), crs = 4326)
head(grid_sf)
grid_df <- sfheaders::sf_to_df(grid_sf, fill=T)
grid_df <- dplyr::select(grid_df, geometry, Area_km2, STRATA)
grid_df <- dplyr::select(grid_df, x, y, Area_km2, STRATA)
plot(grid_df$x, grid_df$y, col=grid_df$STRATA)
names(grid_df) <- c('Lon', 'Lat', 'Area_km2', 'STRATA')
ggplot() +
geom_sf(data = grid_sf, aes(color = Region)) +
facet_wrap(~Region)
#####
## Making extrapolation info
#####
## I think this is the source of the problem as I had forgotten that I had to modify the `make_extrapolation_info` function so that it would accomodate the shapefiles. Jim and I have talked about how to get this edit formally included in the VAST package and I just haven't had time to really push it forward.
strata_use <- data.frame("STRATA" = c("All", "Reg1", "Reg2"))
vast_extrap <- make_extrapolation_info(Region = "User",
strata.limits = strata_use,
create_strata_per_region = TRUE,
input_grid = grid_df,
grid_dim_km = c(1,1))
head(vast_extrap)
str(vast_extrap)
#####
## Making settings
#####
# Make settings (turning off bias.correct to save time for example)
settings = make_settings( n_x = 75,
Region = "User",
purpose = "index2",
bias.correct = FALSE,
knot_method = "grid",
strata.limits = strata_use)
######
## Fit Model
######
# Run model while providing the previously made extrapolation grid and extrapolation info
fit_base = fit_model(
settings = settings,
Lat_i = dat_use[, "LATITUDE"],
Lon_i = dat_use[, "LONGITUDE"],
t_i = dat_use[, "YEAR"],
c_i = rep(0, nrow(dat_use)),
b_i = dat_use[, "CATCH_WT_CAL"],
a_i = rep(0.0112 * 1.852^2, nrow(dat_use)),
v_i = rep("missing", nrow(dat_use)),
extrapolation_list = vast_extrap,
run_model = TRUE
)
######
## Fit Model
######
# Run model while providing the previously made extrapolation grid and extrapolation info
fit_base = fit_model(
settings = settings,
Lat_i = dat_use[, "LATITUDE"],
Lon_i = dat_use[, "LONGITUDE"],
t_i = dat_use[, "YEAR"],
c_i = rep(0, nrow(dat_use)),
b_i = dat_use[, "CATCH_WT_CAL"],
a_i = rep(0.0112 * 1.852^2, nrow(dat_use)),
v_i = rep("missing", nrow(dat_use)),
extrapolation_list = vast_extrap,
input_grid = grid_df,
run_model = TRUE
)
rm(list=ls())
library(tidyverse)
library(VAST)
library(ggplot2)
library(sf)
devtools::source_url("https://raw.github.com/aallyn/TargetsSDM/main/R/vast_functions.r")
# Load in data
load_example(data_set = "GB_fall_haddock")
dat_use<- georges_bank_haddock_fall
plot(dat_use$LONGITUDE, dat_use$LATITUDE)
# Make some example polygons
dat_sf <- st_as_sf(dat_use, coords = c("LONGITUDE", "LATITUDE"), crs = 4326)
all_poly_sfc <- st_sfc(st_polygon(list(cbind(c(st_bbox(dat_sf)["xmin"], st_bbox(dat_sf)["xmin"], st_bbox(dat_sf)["xmax"], st_bbox(dat_sf)["xmax"], st_bbox(dat_sf)["xmin"]), c(st_bbox(dat_sf)["ymin"], st_bbox(dat_sf)["ymax"], st_bbox(dat_sf)["ymax"], st_bbox(dat_sf)["ymin"], st_bbox(dat_sf)["ymin"])))), crs = 4326)
all_poly_use<- st_sf(data.frame("Region" = "All", geom = all_poly_sfc))
all_poly_use
reg1_sfc<- st_sfc(st_polygon(list(cbind(c(-70, -70, -68, -68, -70), c(40, 43, 43, 40, 40)))), crs = 4326)
reg1_use<- st_sf(data.frame("Region" = "Reg1", geom = reg1_sfc))
reg2_sfc<- st_sfc(st_polygon(list(cbind(c(-68, -68, -65, -65, -68), c(40, 43, 43, 40, 40)))), crs = 4326)
reg2_use<- st_sf(data.frame("Region" = "Reg2", geom = reg2_sfc))
index_shape_use <- bind_rows(all_poly_use, reg1_use, reg2_use)
index_shape_use
# Brain dead, apologies for horrible color choices!
ggplot() +
geom_sf(data = dat_sf) +
geom_sf(data = all_poly, fill = NA, color = "red") +
geom_sf(data = reg1_use, fill = NA, color = "blue") +
geom_sf(data = reg2_use, fill = NA, color = "green")
# Brain dead, apologies for horrible color choices!
ggplot() +
geom_sf(data = dat_sf) +
geom_sf(data = all_poly_use, fill = NA, color = "red") +
geom_sf(data = reg1_use, fill = NA, color = "blue") +
geom_sf(data = reg2_use, fill = NA, color = "green")
#####
## Make extrapolation grid
#####
vast_grid <- vast_make_extrap_grid(region_shapefile = all_poly_use, index_shapes = index_shape_use, cell_size = 10000)
table(vast_grid$Region)
grid_sf<- st_as_sf(vast_grid, coords = c("Lon", "Lat"), crs = 4326)
ggplot() +
geom_sf(data = grid_sf, aes(color = Region)) +
facet_wrap(~Region)
#####
## Making extrapolation info
#####
## I think this is the source of the problem as I had forgotten that I had to modify the `make_extrapolation_info` function so that it would accomodate the shapefiles. Jim and I have talked about how to get this edit formally included in the VAST package and I just haven't had time to really push it forward.
strata_use <- data.frame("STRATA" = c("All", "Reg1", "Reg2"))
vast_extrap_info<- make_extrapolation_info_aja(Region = "User", strata.limits = strata_use, input_grid = vast_grid, index_shapes = index_shape_use)
#####
## Making settings
#####
# Make settings (turning off bias.correct to save time for example)
settings = make_settings( n_x = 75,
Region = "User",
purpose = "index2",
bias.correct = FALSE,
knot_method = "grid",
strata.limits = strata_use)
######
## Fit Model
######
# Run model while providing the previously made extrapolation grid and extrapolation info
fit_base = fit_model(
settings = settings,
Lat_i = dat_use[, "LATITUDE"],
Lon_i = dat_use[, "LONGITUDE"],
t_i = dat_use[, "YEAR"],
c_i = rep(0, nrow(dat_use)),
b_i = dat_use[, "CATCH_WT_CAL"],
a_i = rep(0.0112 * 1.852^2, nrow(dat_use)),
v_i = rep("missing", nrow(dat_use)),
extrapolation_list = vast_extrap_info,
run_model = TRUE
)
str(vast_extrap_info)
install.packages(c("adehabitatMA", "astsa", "bit", "blastula", "bookdown", "broom", "bslib", "car", "classInt", "cli", "curl", "data.table", "dbscan", "DescTools", "digest", "e1071", "evaluate", "expm", "forecast", "formatR", "fracdiff", "gap", "geosphere", "gert", "ggh4x", "ggiraph", "ggplot2", "ggpubr", "ggrepel", "gld", "glmnet", "globals", "gstat", "gt", "gtExtras", "gtools", "highr", "Hmisc", "htmltools", "htmlwidgets", "httpuv", "insight", "installr", "isoband", "jpeg", "jsonlite", "knitr", "ks", "lavaan", "locfit", "lubridate", "lwgeom", "maptools", "markdown", "marmap", "Matrix", "matrixStats", "MBA", "mixtools", "modelr", "MSEtool", "ncdf4", "officer", "openssl", "padr", "pbapply", "pkgbuild", "pkgdown", "pkgload", "plyr", "png", "polyclip", "processx", "progressr", "ps", "purrr", "qgraph", "ragg", "raster", "rasterVis", "rbibutils", "RcppArmadillo", "RcppParallel", "reactable", "readr", "rgdal", "rgeos", "rgl", "rmarkdown", "roxygen2", "RSQLite", "rstatix", "s2", "sass", "segmented", "sf", "shiny", "slider", "sp", "sparklyr", "spatialEco", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "spData", "stars", "statmod", "stringi", "stringr", "svglite", "terra", "testthat", "timechange", "timeDate", "tinytex", "tseries", "tsibble", "units", "vctrs", "webshot", "whisker", "wk", "xfun", "xts", "yaml"))
install.packages(c("adehabitatMA", "astsa", "bit", "blastula", "bookdown", "broom", "bslib", "car", "classInt", "cli", "curl", "data.table", "dbscan", "DescTools", "digest", "e1071", "evaluate", "expm", "forecast", "formatR", "fracdiff", "gap", "geosphere", "gert", "ggh4x", "ggiraph", "ggplot2", "ggpubr", "ggrepel", "gld", "glmnet", "globals", "gstat", "gt", "gtExtras", "gtools", "highr", "Hmisc", "htmltools", "htmlwidgets", "httpuv", "insight", "installr", "isoband", "jpeg", "jsonlite", "knitr", "ks", "lavaan", "locfit", "lubridate", "lwgeom", "maptools", "markdown", "marmap", "Matrix", "matrixStats", "MBA", "mixtools", "modelr", "MSEtool", "ncdf4", "officer", "openssl", "padr", "pbapply", "pkgbuild", "pkgdown", "pkgload", "plyr", "png", "polyclip", "processx", "progressr", "ps", "purrr", "qgraph", "ragg", "raster", "rasterVis", "rbibutils", "RcppArmadillo", "RcppParallel", "reactable", "readr", "rgdal", "rgeos", "rgl", "rmarkdown", "roxygen2", "RSQLite", "rstatix", "s2", "sass", "segmented", "sf", "shiny", "slider", "sp", "sparklyr", "spatialEco", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "spData", "stars", "statmod", "stringi", "stringr", "svglite", "terra", "testthat", "timechange", "timeDate", "tinytex", "tseries", "tsibble", "units", "vctrs", "webshot", "whisker", "wk", "xfun", "xts", "yaml"))
