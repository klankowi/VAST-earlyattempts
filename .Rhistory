sed_sf   <- st_as_sf(sed)
# Transform to unprojected lat-lon
sed_sf <- st_transform(sed_sf, crs = st_crs(rugos_sf))
# Add survey stations
survs <- read.csv(here("data/Dataframes/Survey_Data.csv"))
# Remove NA values (cannot be sf object), Convert to sf
survs.n0 <- survs[is.na(survs$LON)==FALSE,]
survs.n0 <- survs.n0[is.na(survs.n0$LAT)==FALSE,]
survs_sf <- st_as_sf(survs.n0, coords = c('LON', 'LAT'))
# Set CRS
st_crs(survs_sf) <- st_crs(rugos_sf)
# Add stock areas
strat_sf <- st_read(here("data/GIS/codstox2.shp"),
quiet=T)
# Add stock areas
strat_sf <- st_read(here("data/GIS/codstox.shp"),
quiet=T)
# Remove points on land
survs_sf <- erase.point(survs_sf, strat_sf, inside=F)
survs_sf <- st_as_sf(survs_sf)
# Pull NOAA bathymetry data
Bathy <- getNOAA.bathy(lon1 = -80, lon2 = -60,
lat1 = 30, lat2 = 50, resolution = 1)
# Convert data to raster
Bathy_Raster <- marmap::as.raster(Bathy)
# Remove intermediates
rm(rugos, sed, survs, survs.n0, Bathy)
# Join with characteristics of polygon datasets
survs_sf <- st_join(survs_sf, left=TRUE, sed_sf[,1:10])
head(rugos_sf)
head(survs_sf)
survs_sf <- st_join(survs_sf, left=TRUE, rugos_sf[,"COND"])
ggplot() +
geom_sf(data=rugos_sf, aes(fill="COND"))
table(rugos_sf$COND)
?scale_fill_manual
ggplot() +
geom_sf(data=rugos_sf, aes(fill="COND"), color=NA) +
scale_fill_manual(values=c('orange', 'lightblue'), aesthetics="fill") +
theme_bw()
ggplot() +
geom_sf(data=rugos_sf, aes(fill=COND), color=NA) +
scale_fill_manual(values=c('orange', 'lightblue'), aesthetics="fill") +
theme_bw()
ggplot(ecodata::coast) +
geom_sf(data=rugos_sf, aes(fill=COND), color=NA) +
scale_fill_manual(values=c('orange', NA), aesthetics="fill") +
theme_bw()
survs_sf <- st_join(survs_sf, left=TRUE, rugos_sf[,2])
rugos_sf
st_is_longlat(rugos_sf)
sf_use_s2()
sf_use_s2(FALSE)
cmap2 <- st_crop(rugos_sf, xmin=-76, ymin=35, xmax=-65, ymax=45)
sf_use_sf2(TRUE)
sf_use_s2(TRUE)
cmap1 <- st_make_valid(rugos_sf)
cmap2 <- st_crop(cmap1, xmin=-76, ymin=35, xmax=-65, ymax=45)
head(cmap1)
survs_sf <- st_join(survs_sf, left=TRUE, cmap1[,2])
# Clear workspace
rm(list=ls())
#### Load libraries ####
library(tidyverse, quietly=T,verbose=F)
library(sf, quietly=T,verbose=F)
library(raster, quietly=T, verbose=F)
library(rgeos, quietly=T, verbose=F)
library(here, quietly=T, verbose=F)
library(viridis, quietly=T, verbose=F)
library(RColorBrewer, quietly=T, verbose=F)
library(spatialEco, quietly=T, verbose=F)
library(marmap, quietly=T, verbose=F)
# Load data
# Load rugosity shapefile
rugos <- st_read(here("data/GIS/Rugosity_15as_F_Dissolve.shp"),
quiet = TRUE)
# Remove unneeded columns
rugos$STRATA_1 <- NULL; rugos$rugosity <- NULL; rugos$pct70 <- NULL
# Load sediment shapefile
sed <- st_read(here("data/GIS/Sediment_Krig_1K_Polygons.shp"),
quiet=TRUE)
# Convert to sf
rugos_sf <- st_as_sf(rugos)
sed_sf   <- st_as_sf(sed)
# Fix slight self-intersection issue
rugos_sf <- st_make_valid(rugos_sf)
# Transform to unprojected lat-lon
sed_sf <- st_transform(sed_sf, crs = st_crs(rugos_sf))
# Add survey stations
survs <- read.csv(here("data/Dataframes/Survey_Data.csv"))
# Remove NA values (cannot be sf object), Convert to sf
survs.n0 <- survs[is.na(survs$LON)==FALSE,]
survs.n0 <- survs.n0[is.na(survs.n0$LAT)==FALSE,]
survs_sf <- st_as_sf(survs.n0, coords = c('LON', 'LAT'))
# Set CRS
st_crs(survs_sf) <- st_crs(rugos_sf)
# Add stock areas
strat_sf <- st_read(here("data/GIS/codstox.shp"),
quiet=T)
# Remove points on land
survs_sf <- erase.point(survs_sf, strat_sf, inside=F)
survs_sf <- st_as_sf(survs_sf)
# Pull NOAA bathymetry data
Bathy <- getNOAA.bathy(lon1 = -80, lon2 = -60,
lat1 = 30, lat2 = 50, resolution = 1)
# Convert data to raster
Bathy_Raster <- marmap::as.raster(Bathy)
# Remove intermediates
rm(rugos, sed, survs, survs.n0, Bathy)
# Join with characteristics of polygon datasets
survs_sf <- st_join(survs_sf, left=TRUE, sed_sf[,1:10])
survs_sf <- st_join(survs_sf, left=TRUE, cmap1[,2])
survs_sf <- st_join(survs_sf, left=TRUE, rugos_sf[,2])
# Join with characteristics of bathy raster
survs.spdf <- as(survs_sf, "Spatial")
survs.spdf$value <- raster::extract(Bathy_Raster,
survs.spdf)
survs.df <- as.data.frame(survs.spdf)
survs.df <- dplyr::select(survs.df, HAUL_ID, value)
colnames(survs.df) <- c('HAUL_ID', 'BATHY.DEPTH')
survs_sf <- merge(survs_sf, survs.df, by="HAUL_ID")
survs_sf <- survs_sf[with(survs_sf,
order(DATE, HAUL_ID)),]
rownames(survs_sf) <- NULL
head(survs_sf)
# Great. Save this.
save(survs_sf,
file = here("data/RData_Storage/surveys_habitat.RData"))
# Clear workspace
rm(list=ls())
# Load libraries
library(ncdf4)
library(raster)
library(tidyverse)
library(here)
here::here()
# Load functions
source(here("utilities/nc_to_raster_func.R"))
source(here("utilities/raster_to_sstdf_func.R"))
# Set variable name to sea surface temperature
varname <- 'sst'
# Set period of years to work with
years <- 1982:2022
# Clear workspace
rm(list=ls())
# Load libraries
library(tidyverse)
library(here)
library(DT)
library(FishStatsUtils)
library(sf)
library(raster)
library(terra)
library(nngeo)
library(data.table)
# Set GGplot auto theme
theme_set(theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "n",
axis.text.x=element_text(size=12),
axis.text.y=element_text(size=12),
axis.title.x=element_text(size=14),
axis.title.y=element_text(size=14, angle=90, vjust=2),
plot.title=element_text(size=14),
plot.caption=element_text(hjust=0, face='italic', size=12)))
# Set GGplot auto theme
theme_set(theme(panel.grid.major = element_line(color='lightgray'),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(color='black', size=1, fill=NA),
legend.position = "bottom",
axis.text.x=element_text(size=12),
axis.text.y=element_text(size=12),
axis.title.x=element_text(size=14),
axis.title.y=element_text(size=14, angle=90, vjust=2),
plot.title=element_text(size=14, hjust = 0, vjust = 1.2),
plot.caption=element_text(hjust=0, face='italic', size=12)))
#list of SST dataframes
SSTdfs <- list.files(here("data-raw/gridded/sst_data/"), pattern = "*.rds")
# Create empty tibble to fill
stn_OISST <- tibble()
# Load station data
stations <- readRDS(here("data/RData_Storage/surveys_habitat.RDS"))
# Load station data
load(here("data/RData_Storage/surveys_habitat.RDS"))
# Load station data
load(here("data/RData_Storage/surveys_habitat.RData"))
# Load station data
stations <- load(here("data/RData_Storage/surveys_habitat.RData"))
head(survs_sf)
test::sfheaders::sf_to_sf(survs_sf)
test <- sfheaders::sf_to_sf(survs_sf)
install.packages('sfheaders')
test <- sfheaders::sf_to_sf(survs_sf)
test <- sfheaders::sf_to_df(survs_sf)
head(test)
test <- sfheaders::sf_to_df(survs_sf, fill=TRUE)
head(test)
stations <- sfheaders::sf_to_df(survs_sf, fill=TRUE)
stations <- stations %>%
select(stations, -sfg_id)
stations <- dplyr::select(stations, -c(sfg_id, point_id))
head(stations)
rename(stations, LON=x)
stations <- rename(stations, LON=x)
statinos <- rename(stations, LAT=y)
head(stations)
stations <- rename(stations, LAT=y)
head(stations)
rm(statinos)
# Clear workspace
rm(list=ls())
# Load libraries
library(tidyverse)
library(here)
library(DT)
library(FishStatsUtils)
library(sf)
library(raster)
library(terra)
library(nngeo)
library(data.table)
# Set GGplot auto theme
theme_set(theme(panel.grid.major = element_line(color='lightgray'),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(color='black', size=1, fill=NA),
legend.position = "bottom",
axis.text.x=element_text(size=12),
axis.text.y=element_text(size=12),
axis.title.x=element_text(size=14),
axis.title.y=element_text(size=14, angle=90, vjust=2),
plot.title=element_text(size=14, hjust = 0, vjust = 1.2),
plot.caption=element_text(hjust=0, face='italic', size=12)))
#list of SST dataframes
SSTdfs <- list.files(here("data-raw/gridded/sst_data/"), pattern = "*.rds")
# Create empty tibble to fill
stn_OISST <- tibble()
# Load station data
load(here("data/RData_Storage/surveys_habitat.RData"))
stations <- sfheaders::sf_to_df(survs_sf, fill=TRUE)
stations <- dplyr::select(stations, -c(sfg_id, point_id))
head(stations)
stations <- rename(stations, LON=x)
stations <- rename(stations, LAT=y)
rm(survs_sf)
# Create datestring to merge SST and OISST
stations$DATE <- as.POSIXct(stations$DATE,
format = "%m/%d/%Y")
stations$month <- substr(stations$DATE, start=6, stop=7)
stations$day <- substr(stations$DATE, start=9, stop=10)
stations <- subset(stations, is.na(stations$LAT)==FALSE)
stations <- subset(stations, is.na(stations$LON)==FALSE)
stations$yrmody <- paste0(stations$YEAR, stations$month, stations$day)
stations <- st_as_sf(stations, coords=c("LON", "LAT"),
na.fail=T)
stations <- subset(stations, YEAR > 1981)
head(stations)
# Load station data
load(here("data/RData_Storage/surveys_habitat.RData"))
stations <- sfheaders::sf_to_df(survs_sf, fill=TRUE)
stations <- dplyr::select(stations, -c(sfg_id, point_id))
head(stations)
stations <- rename(stations, LON=x)
stations <- rename(stations, LAT=y)
rm(survs_sf)
str(stations$DATE)
# Create datestring to merge SST and OISST
stations$DATE <- as.POSIXct(stations$DATE,
format = "%Y-%m-%d %H:%M:%S")
head(stations)
stations$month <- substr(stations$DATE, start=6, stop=7)
stations$day <- substr(stations$DATE, start=9, stop=10)
stations$yrmody <- paste0(stations$YEAR, stations$month, stations$day)
stations <- st_as_sf(stations, coords=c("LON", "LAT"),
na.fail=T)
stations <- subset(stations, YEAR > 1981)
stations <- subset(stations, SEASON == 'FALL' |
SEASON == 'SPRING')
head(stations)
# Load station data
load(here("data/RData_Storage/surveys_habitat.RData"))
stations <- sfheaders::sf_to_df(survs_sf, fill=TRUE)
stations <- dplyr::select(stations, -c(sfg_id, point_id))
head(stations)
stations <- rename(stations, LON=x)
stations <- rename(stations, LAT=y)
rm(survs_sf)
# Create datestring to merge SST and OISST
stations$DATE <- as.POSIXct(stations$DATE,
format = "%Y-%m-%d %H:%M:%S")
stations$month <- substr(stations$DATE, start=6, stop=7)
stations$day <- substr(stations$DATE, start=9, stop=10)
stations$yrmody <- paste0(stations$YEAR, stations$month, stations$day)
stations <- st_as_sf(stations, coords=c("LON", "LAT"),
na.fail=T)
stations <- subset(stations, YEAR > 1981)
table(stations$SEASON)
table(stations$TRUE_SEASON)
# Initialize progress bar
pb <- txtProgressBar(min=0, max=length(SSTdfs), initial=0, char="=", style=3)
# Merge in year-based loops
for(df in SSTdfs){
# Call the number of the current .rds file in the vector of .rds files
t <- match(df, SSTdfs)
# Update progress bar
setTxtProgressBar(pb, t)
getTxtProgressBar(pb)
# Call annual .rds OISST file
sstdf <- readRDS(paste0(here("data-raw/gridded/sst_data/", df)))
# Create string of sampled years (removes cod data prior to 1982)
stationsyr <- stations %>%
filter(YEAR == unique(sstdf$year))
# Filter out OISST days not sampled for cod, convert to sf object
sstdf_survdays <- sstdf %>%
dplyr::mutate(yrmody = as.numeric(paste0(year, month, day)) )%>%
dplyr::filter(yrmody %in% unique(stationsyr$yrmody)) %>%
dplyr::mutate(year = as.numeric(year),
month = as.numeric(month),
day = as.numeric(day),
declon = Lon,
declat = Lat) %>%
dplyr::select(-Lon, -Lat) %>%
sf::st_as_sf(coords=c("declon","declat"), crs=4326, remove=FALSE)
# Join by nearest neighbor and date
yrdietOISST <- suppressMessages(do.call('rbind',
lapply(split(stationsyr,
1:nrow(stationsyr)),
function(x) {
st_join(x,
sstdf_survdays[sstdf_survdays$yrmody == unique(x$yrmody),],
join = st_nn, k = 1, progress = TRUE)
}
)))
# Bind one year of the loop to the initialized tibble
stn_OISST <- rbind(stn_OISST, yrdietOISST)
# Close segment of progress bar every loop
close(pb)
}
# Save output
saveRDS(stn_OISST, here("data/RData_Storage/stn_OISST.rds"))
head(stn_OISST)
# Read in station data and station-OISST
stn_OISST_merge <- stn_OISST %>%
dplyr::select(-month.y,
-day.y,
-yrmody.y) %>%
dplyr::rename(month = month.x,
day = day.x,
yrmody = yrmody.x,
oisst = sst) %>%
dplyr::select(HAUL_ID, oisst, declon, declat) %>%
sf::st_drop_geometry()
head(stn_OISST_merge)
# Merge
agg_stn_all_OISST <- left_join(stations, stn_OISST_merge)
head(agg_stn_all_OISST)
# Save output
saveRDS(agg_stn_all_OISST, here("data/RData_Storage/agg_stn_all_OISST.rds"))
# Create dataset of comparisons
comparesst <- agg_stn_all_OISST %>%
dplyr::filter(YEAR>1981)%>%
dplyr::select(SURFACE.TEMP, oisst, declon, declat, SURVEY) %>%
na.omit()
# Plot
ggplot2::ggplot(comparesst, aes(x=SURFACE.TEMP, y=oisst, color=SURVEY, fill=SURVEY)) +
geom_point(alpha=0.8, pch=16)+
geom_abline(intercept = 0, slope = 1) +
labs(x = "Field surface temperature (deg C)",
y = "OISST (deg C)") +
theme_bw()
# Map annual shifts
mapsst <- agg_stn_all_OISST %>%
dplyr::filter(YEAR>1981) %>%
#dplyr::filter(SEASON == 'FALL' | SEASON=='SPRING') %>%
dplyr::mutate(sstdiff = SURFACE.TEMP-oisst) %>%
dplyr::select(HAUL_ID, YEAR, SEASON, TRUE_SEASON,
declon, declat, SURFACE.TEMP, oisst, sstdiff)
st_crs(mapsst) <- "EPSG:4326"
yrmap <- function(mapyr){
ggplot2::ggplot(mapsst%>%filter(YEAR==mapyr)) +
geom_sf(data = ecodata::coast) +
coord_sf(xlim = c(-77, -65), ylim = c(35, 45)) +
geom_point(aes(x=declon, y=declat, colour=sstdiff)) +
scale_color_gradient2(low = "blue",
mid = "green",
high = "purple",
midpoint = 0,
na.value = "black") +
theme_bw() +
facet_wrap(~TRUE_SEASON) +
ggtitle(paste("SST difference survey-OISST:", mapyr, sep = " "))
}
for(mapyr in 2015:2022){
#cat("  \n####",  as.character(mapyr),"  \n")
print(yrmap(mapyr))
#cat("  \n")
}
ggplot2::ggplot(mapsst%>%filter(YEAR==mapyr)) +
geom_sf(data = ecodata::coast) +
coord_sf(xlim = c(-77, -65), ylim = c(35, 45)) +
geom_point(aes(x=declon, y=declat, colour=sstdiff)) +
scale_color_gradient2(low = "blue",
mid = "green",
high = "purple",
midpoint = 0,
na.value = "gray") +
theme_bw() +
facet_wrap(~TRUE_SEASON) +
ggtitle(paste("SST difference survey-OISST:", mapyr, sep = " "))
yrmap <- function(mapyr){
ggplot2::ggplot(mapsst%>%filter(YEAR==mapyr)) +
geom_sf(data = ecodata::coast) +
coord_sf(xlim = c(-77, -65), ylim = c(35, 45)) +
geom_point(aes(x=declon, y=declat, colour=sstdiff)) +
scale_color_gradient2(low = "blue",
mid = "green",
high = "purple",
midpoint = 0,
na.value = "gray") +
theme_bw() +
facet_wrap(~TRUE_SEASON) +
ggtitle(paste("SST difference survey-OISST:", mapyr, sep = " "))
}
for(mapyr in 2019:2022){
#cat("  \n####",  as.character(mapyr),"  \n")
print(yrmap(mapyr))
#cat("  \n")
}
yrmap <- function(mapyr){
ggplot2::ggplot(mapsst%>%filter(YEAR==mapyr)) +
geom_sf(data = ecodata::coast) +
coord_sf(xlim = c(-77, -65), ylim = c(35, 45)) +
geom_point(aes(x=declon, y=declat, colour=sstdiff)) +
scale_color_gradient2(low = "yellow",
mid = "green",
high = "blue",
midpoint = 0,
na.value = "gray") +
theme_bw() +
facet_wrap(~TRUE_SEASON) +
ggtitle(paste("SST difference survey-OISST:", mapyr, sep = " "))
}
for(mapyr in 2019:2022){
#cat("  \n####",  as.character(mapyr),"  \n")
print(yrmap(mapyr))
#cat("  \n")
}
yrmap <- function(mapyr){
ggplot2::ggplot(mapsst%>%filter(YEAR==mapyr)) +
geom_sf(data = ecodata::coast) +
coord_sf(xlim = c(-77, -65), ylim = c(35, 45)) +
geom_point(aes(x=declon, y=declat, colour=sstdiff)) +
scale_color_gradient2(low = "blue",
mid = "yellow",
high = "red",
midpoint = 0,
na.value = "gray") +
theme_bw() +
facet_wrap(~TRUE_SEASON) +
ggtitle(paste("SST difference survey-OISST:", mapyr, sep = " "))
}
for(mapyr in 2019:2022){
#cat("  \n####",  as.character(mapyr),"  \n")
print(yrmap(mapyr))
#cat("  \n")
}
summary(mapsst$sstdiff)
?scale_color_gradient
yrmap <- function(mapyr){
ggplot2::ggplot(mapsst%>%filter(YEAR==mapyr)) +
geom_sf(data = ecodata::coast) +
coord_sf(xlim = c(-77, -65), ylim = c(35, 45)) +
geom_point(aes(x=declon, y=declat, colour=sstdiff)) +
scale_color_gradient2(low = "blue",
mid = "yellow",
high = "red",
midpoint = 0,
limits=c(-25, 15)
na.value = "gray") +
yrmap <- function(mapyr){
ggplot2::ggplot(mapsst%>%filter(YEAR==mapyr)) +
geom_sf(data = ecodata::coast) +
coord_sf(xlim = c(-77, -65), ylim = c(35, 45)) +
geom_point(aes(x=declon, y=declat, colour=sstdiff)) +
scale_color_gradient2(low = "blue",
mid = "yellow",
high = "red",
midpoint = 0,
limits=c(-25, 15),
na.value = "gray") +
theme_bw() +
facet_wrap(~TRUE_SEASON) +
ggtitle(paste("SST difference survey-OISST:", mapyr, sep = " "))
}
for(mapyr in 2019:2022){
#cat("  \n####",  as.character(mapyr),"  \n")
print(yrmap(mapyr))
#cat("  \n")
}
# Load station data
load(here("data/RData_Storage/surveys_habitat.RData"))
table(survs_sf$YEAR)
table(stn_OISST$year)
nrow(subset(survs_sf, YEAR > 1981))
nrow(stn_OISST)
head(stn_OISST)
head(agg_stn_all_OISST)
summary(agg_stn_all_OISST$oisst)
View(agg_stn_all_OISST)
