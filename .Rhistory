# Set GIF save location
setwd("C:/Users/klankowicz/Desktop/VAST_examples/Mapping/abund/GIFs/")
# Convert PNGs to GIF
library(gifski)
gifski(files, "Ages2-5_abund.gif", loop = FALSE, delay = 0.25)
# List files in given directory
files  <- list.files(paste0("C:/Users/klankowicz/Desktop/VAST_examples/",
"Mapping/abund/Ages 0-2"))
setwd("C:/Users/klankowicz/Desktop/VAST_examples/Mapping/abund/")
files <- paste0(getwd(), "/Ages 0-2/", files)
# Set GIF save location
setwd("C:/Users/klankowicz/Desktop/VAST_examples/Mapping/abund/GIFs/")
# Convert PNGs to GIF
library(gifski)
gifski(files, "Ages0-2_abund.gif", loop = FALSE, delay = 0.25)
### A quick demonstration of how to extract map quantities and
### plot them externally. Cole Monnahan | May 2021
rm(list=ls())
# Load libraries
library(VAST)                           # 3.8.0
library(ggplot2)                        # 2.10.0
library(dplyr)
library(tidyr)
library(here)
# Load data
load(here("VAST_runs/StrataDensCats_3/strata_cats_3.Rdata"))
# Set GGplot auto theme
theme_set(theme(panel.grid.major = element_line(color='lightgray'),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(color='black', size=1, fill=NA),
legend.title = element_text(size=16),
legend.text = element_text(size=12),
legend.background = element_blank(),
axis.text.x=element_text(size=16),
axis.text.y=element_text(size=16),
axis.title.x=element_text(size=14),
axis.title.y=element_text(size=14, angle=90, vjust=2),
plot.title=element_text(size=18, hjust = 0, vjust = 1.2),
plot.caption=element_text(hjust=0, face='italic', size=12)))
# Pull vector of years
years <- unique(survs$Year)
# Remake map list locally for recreating plots
mdl <- make_map_info(Region = settings$Region,
spatial_list = fit$spatial_list,
Extrapolation_List = fit$extrapolation_list)
## Get the model estimate of density for each category and year;
# link it spatially to a lat/lon extrapolation point.
# Category 1
D_gt.1 <- fit$Report$D_gct[,1,] # drop the category
dimnames(D_gt.1) <- list(cell=1:nrow(D_gt.1), year=years)
D_gt.1 <- D_gt.1 %>% as.data.frame() %>%
tibble::rownames_to_column(var = "cell") %>%
pivot_longer(-cell, names_to = "Year", values_to='D')
D.1 <- merge(D_gt.1, mdl$PlotDF, by.x='cell', by.y='x2i')
D.1$Cat <- 1
# Category 2
D_gt.2 <- fit$Report$D_gct[,2,] # drop the category
dimnames(D_gt.2) <- list(cell=1:nrow(D_gt.2), year=years)
D_gt.2 <- D_gt.2 %>% as.data.frame() %>%
tibble::rownames_to_column(var = "cell") %>%
pivot_longer(-cell, names_to = "Year", values_to='D')
D.2 <- merge(D_gt.2, mdl$PlotDF, by.x='cell', by.y='x2i')
D.2$Cat <- 2
# Category 3
D_gt.3 <- fit$Report$D_gct[,3,] # drop the category
dimnames(D_gt.3) <- list(cell=1:nrow(D_gt.3), year=years)
D_gt.3 <- D_gt.3 %>% as.data.frame() %>%
tibble::rownames_to_column(var = "cell") %>%
pivot_longer(-cell, names_to = "Year", values_to='D')
D.3 <- merge(D_gt.3, mdl$PlotDF, by.x='cell', by.y='x2i')
D.3$Cat <- 3
# Rebind to new shape
D <- rbind(D.1, D.2, D.3)
# Adjust data to log abundance, stip units
D$D <- strip_units(D$D)
D$logD <- log(D$D)
# Check for outliers, remove
outliers <- boxplot.stats(D$logD)$out
D$D[D$logD %in% outliers] <- NA
#Rebind to list
D.list <- split(D, f=D$Cat)
names(D.list) <- c("Ages 0-2", "Ages 2-5", "Ages 5+")
# Set CRS
projargs <- fit$extrapolation_list$projargs
CRS_orig = sp::CRS("+proj=longlat")
CRS_proj = sp::CRS(projargs)
closed.areas <- st_read(here("data/GIS/closed_areas_wgs.shp"))
library(sf)
closed.areas <- st_read(here("data/GIS/closed_areas_wgs.shp"))
i=1;j=1
Cat.sub <- D.list[[i]]
# Set min-max of Zlim for plotting
min.D <- floor(round(min(Cat.sub$D, na.rm=T),1))
max.D <- ceiling(round(max(Cat.sub$D, na.rm=T),1))
Year.list <- split(Cat.sub, f=Cat.sub$Year)
Year.sub <- Year.list[[j]]
Year <- Year.sub$Year[1]
loc_g <- cbind(Year.sub$Lon, Year.sub$Lat)
n_cells <- dim(loc_g)[1]
Points_orig = sp::SpatialPointsDataFrame(coords = loc_g,
data = data.frame(y = Year.sub$D),
proj4string = CRS_orig)
Points_LongLat = sp::spTransform(Points_orig, sp::CRS("+proj=longlat"))
Points_proj = sp::spTransform(Points_orig, CRS_proj)
cell.size = mean(diff(Points_proj@bbox[1, ]),
diff(Points_proj@bbox[2,]))/floor(sqrt(n_cells))
Points_sf = sf::st_as_sf(Points_proj)
grid = sf::st_make_grid(Points_sf, cellsize = cell.size)
grid_i = sf::st_intersects(Points_sf, grid)
grid = sf::st_sf(grid, y = tapply(Points_sf$y,
INDEX = factor(as.numeric(grid_i),
levels = 1:length(grid)),
FUN = mean, na.rm = TRUE))
# Plot
p <- ggplot(ecodata::coast)+
geom_sf(data=grid, aes(fill=y, col=y)) +
geom_sf(data=closed.areas, fill=NA, col='black')+
scale_color_viridis_c(limits=c(min.D, max.D),
na.value = 'transparent',
option=('rocket'),
direction = -1,
alpha = 0.8) +
scale_fill_viridis_c(limits=c(min.D, max.D),
na.value = 'transparent',
option=('rocket'),
direction = -1,
alpha = 0.8) +
geom_sf(fill='gray')+
coord_sf(xlim=c(-76, -65),
ylim=c(36,46),
crs="EPSG:4326")+
labs(title=paste0(names(D.list)[i], " distribution ", Year.sub$Year[1])) +
theme(legend.position = c(0.83, 0.13))
p$labels$fill <- "Abundance"
p$labels$colour <- "Abundance"
p
# Outer loop: Categories
for(i in 1:length(D.list)){
Cat.sub <- D.list[[i]]
# Set min-max of Zlim for plotting
min.D <- floor(round(min(Cat.sub$D, na.rm=T),1))
max.D <- ceiling(round(max(Cat.sub$D, na.rm=T),1))
Year.list <- split(Cat.sub, f=Cat.sub$Year)
# Inner loop: Years
for(j in 1:length(Year.list)
#10 # for testing
){
Year.sub <- Year.list[[j]]
Year <- Year.sub$Year[1]
loc_g <- cbind(Year.sub$Lon, Year.sub$Lat)
n_cells <- dim(loc_g)[1]
Points_orig = sp::SpatialPointsDataFrame(coords = loc_g,
data = data.frame(y = Year.sub$D),
proj4string = CRS_orig)
Points_LongLat = sp::spTransform(Points_orig, sp::CRS("+proj=longlat"))
Points_proj = sp::spTransform(Points_orig, CRS_proj)
cell.size = mean(diff(Points_proj@bbox[1, ]),
diff(Points_proj@bbox[2,]))/floor(sqrt(n_cells))
Points_sf = sf::st_as_sf(Points_proj)
grid = sf::st_make_grid(Points_sf, cellsize = cell.size)
grid_i = sf::st_intersects(Points_sf, grid)
grid = sf::st_sf(grid, y = tapply(Points_sf$y,
INDEX = factor(as.numeric(grid_i),
levels = 1:length(grid)),
FUN = mean, na.rm = TRUE))
# Plot
p <- ggplot(ecodata::coast)+
geom_sf(data=grid, aes(fill=y, col=y)) +
geom_sf(data=closed.areas, fill=NA, col='black')+
scale_color_viridis_c(limits=c(min.D, max.D),
na.value = 'transparent',
option=('rocket'),
direction = -1,
alpha = 0.8) +
scale_fill_viridis_c(limits=c(min.D, max.D),
na.value = 'transparent',
option=('rocket'),
direction = -1,
alpha = 0.8) +
geom_sf(fill='gray')+
coord_sf(xlim=c(-76, -65),
ylim=c(36,46),
crs="EPSG:4326")+
labs(title=paste0(names(D.list)[i], " distribution ", Year.sub$Year[1])) +
theme(legend.position = c(0.83, 0.13))
p$labels$fill <- "Abundance"
p$labels$colour <- "Abundance"
# Save
ggsave(p,
filename =
paste0("C:/Users/klankowicz/Desktop/VAST_examples/Mapping/abund_closed/",
names(D.list)[i], "/",
names(D.list)[i], " distribution ", Year, '.png'),
device="png")
}
}
# Clear workspace
rm(list=ls())
# Load libraries
library(VAST)
devtools::install_github("hrbrmstr/dtupdate")
install.packages(c("BH", "bookdown", "broom", "chron", "colorspace", "curl", "dbplyr", "dplyr", "DT", "e1071", "evaluate", "fansi", "flextable", "fontawesome", "forcats", "formatR", "fs", "gap", "gargle", "gdtools", "ggiraph", "gsl", "httpuv", "insight", "kernlab", "knitr", "lpSolve", "lubridate", "lwgeom", "mapproj", "markdown", "officer", "pbapply", "pbkrtest", "raster", "rbibutils", "rcompanion", "Rcpp", "RcppArmadillo", "RCurl", "rgdal", "rgl", "rmarkdown", "rms", "rnaturalearth", "rstan", "rstatix", "sass", "sourcetools", "sp", "spatstat", "spatstat.explore", "spatstat.geom", "spatstat.linnet", "spatstat.model", "spatstat.random", "terra", "tidyr", "tinytex", "TMB", "tseries", "TSP", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("BH", "bookdown", "broom", "chron", "colorspace", "curl", "dbplyr", "dplyr", "DT", "e1071", "evaluate", "fansi", "flextable", "fontawesome", "forcats", "formatR", "fs", "gap", "gargle", "gdtools", "ggiraph", "gsl", "httpuv", "insight", "kernlab", "knitr", "lpSolve", "lubridate", "lwgeom", "mapproj", "markdown", "officer", "pbapply", "pbkrtest", "raster", "rbibutils", "rcompanion", "Rcpp", "RcppArmadillo", "RCurl", "rgdal", "rgl", "rmarkdown", "rms", "rnaturalearth", "rstan", "rstatix", "sass", "sourcetools", "sp", "spatstat", "spatstat.explore", "spatstat.geom", "spatstat.linnet", "spatstat.model", "spatstat.random", "terra", "tidyr", "tinytex", "TMB", "tseries", "TSP", "utf8", "vctrs", "vroom", "xfun", "yaml"))
library(beepr)
beep(0)
beep(0)
beep(0)
beep(1)
beep(2)
beep(2)
beep(3)
beep(4)
beep(5)
beep(6)
beep(7)
beep(8)
beep(9)
beep(10)
beep(11)
beep(1)
FishStatsUtils::plot_variable()
FishStatsUtils::plot_variable
FishStatsUtils::plot_maps
?FishStatsUtils::plot_maps
FishStatsUtils::plot_variable
??FishStatsUtils
library(VAST)
library(here)
load(here("VAST_runs/StrataDensCats_3/stratadens_3.Rdata"))
load(here("VAST_runs/StrataDensCats_3/strata_cats_3.Rdata"))
# Remake map list locally for recreating plots
mdl <- make_map_info(Region = settings$Region,
spatial_list = fit$spatial_list,
Extrapolation_List = fit$extrapolation_list)
setwd("C:/Users/klankowicz/Desktop/VAST_examples/Plotting_attempts")
plot_maps(plot_set=1,
fit=fit,
PlotDF = mdl$PlotDF,
projargs = fit$extrapolation_list$projargs,
Panel="Category")
plot_maps(plot_set=1,
fit=fit,
PlotDF = mdl$PlotDF,
projargs = fit$extrapolation_list$projargs,
Panel="Category",
n_cells = 2000)
plot_maps(plot_set=2,
fit=fit,
PlotDF = mdl$PlotDF,
projargs = fit$extrapolation_list$projargs,
Panel="Category",
n_cells = 2000)
plot_maps(plot_set=3,
fit=fit,
PlotDF = mdl$PlotDF,
projargs = fit$extrapolation_list$projargs,
Panel="Category",
n_cells = 2000)
mdl$PlotDF
plot(fit)
dev.off()
plot_results(fit, plot_set=1)
FishStatsUtils::plot_results
plot_results(fit, plot_set=2)
dev.off()
is.null(category_names)
category_names = paste0("Category_", 1:fit$data_list$n_c)
message("\n### Creating plots in directory ", working_dir)
message("\n### Making plots of data availability and knots")
plot_data_args = list(...)
plot_data_args = combine_lists(input = plot_data_args, args_to_use = formalArgs(plot_data),
default = list(Extrapolation_List = fit$extrapolation_list,
Spatial_List = fit$spatial_list, Lat_i = fit$data_frame[,
"Lat_i"], Lon_i = fit$data_frame[, "Lon_i"],
Year_i = fit$data_frame[, "t_i"], PlotDir = working_dir,
year_labels = year_labels, projargs = projargs))
working_dir = paste0(getwd(), "/")
fit = fit
settings = settings
plot_set = 3
year_labels = fit$year_labels
years_to_plot = fit$years_to_plot
category_names = fit$category_names
strata_names = fit$strata_names
use_biascorr = F
map_list = NULL
check_residuals = TRUE
cluster_results = TRUE
projargs = "+proj=longlat"
zrange = NULL
n_samples = 100
calculate_relative_to_average = FALSE
type=1
n_cells = NULL
n_cells_residuals = NULL
RotationMethod = "PCA"
quantiles = c(0.05, 0.5, 0.95)
similarity_metric = c("hclust", "Correlation", "Dissimilarity", "Covariance")
is.null(fit$Report
)
is.null(category_names)
dir.create(working_dir, showWarnings = FALSE, recursive = TRUE)
message("\n### Creating plots in directory ", working_dir)
message("\n### Making plots of data availability and knots")
plot_data_args = list(...)
plot_data_args = combine_lists(input = plot_data_args, args_to_use = formalArgs(plot_data),
default = list(Extrapolation_List = fit$extrapolation_list,
Spatial_List = fit$spatial_list, Lat_i = fit$data_frame[,
"Lat_i"], Lon_i = fit$data_frame[, "Lon_i"],
Year_i = fit$data_frame[, "t_i"], PlotDir = working_dir,
year_labels = year_labels, projargs = projargs))
plot_data_args = list()
plot_data_args = combine_lists(input = plot_data_args, args_to_use = formalArgs(plot_data),
default = list(Extrapolation_List = fit$extrapolation_list,
Spatial_List = fit$spatial_list, Lat_i = fit$data_frame[,
"Lat_i"], Lon_i = fit$data_frame[, "Lon_i"],
Year_i = fit$data_frame[, "t_i"], PlotDir = working_dir,
year_labels = year_labels, projargs = projargs))
do.call(what = plot_data, args = plot_data_args)
is.null(map_list)
map_list = make_map_info(Region = settings$Region, spatial_list = fit$spatial_list,
Extrapolation_List = fit$extrapolation_list)
message("\n### Making plot of anisotropy")
plot_anisotropy(FileName = paste0(working_dir, "Aniso.png"),
Obj = fit$tmb_list$Obj)
library(TMB)
library(TMBhelper)
message("\n### Making plot of anisotropy")
plot_anisotropy(FileName = paste0(working_dir, "Aniso.png"),
Obj = fit$tmb_list$Obj)
library(Rcpp)
plot_anisotropy(FileName = paste0(working_dir, "Aniso.png"),
Obj = fit$tmb_list$Obj)
plot_biomass_index_args = list()
!is.null(fit$parameter_estimates$SD)
message("\n### Making plot of abundance index")
plot_biomass_index_args = combine_lists(input = plot_biomass_index_args,
args_to_use = formalArgs(plot_biomass_index), default = list(DirName = working_dir,
fit = fit, year_labels = year_labels, years_to_plot = years_to_plot,
use_biascorr = use_biascorr, category_names = category_names,
strata_names = strata_names))
Index = do.call(what = plot_biomass_index, args = plot_biomass_index_args)
plot_similarity_args = list()
message("\n### Making plot of covariance/dissimilarity matrices")
plot_similarity_args = combine_lists(input = plot_similarity_args,
args_to_use = formalArgs(plot_similarity), default = list(fit = fit,
year_labels = year_labels, category_names = category_names,
similarity_metric = similarity_metric, working_dir = working_dir))
do.call(what = plot_similarity, args = plot_similarity_args)
!is.null(fit$parameter_estimates$SD) & fit$data_list$n_c >
1
message("\n### Making plot of composition data")
calculate_proportion_args = list()
calculate_proportion_args = combine_lists(input = calculate_proportion_args,
args_to_use = formalArgs(calculate_proportion), default = list(TmbData = fit$data_list,
Index = Index, year_labels = year_labels, years_to_plot = years_to_plot,
use_biascorr = use_biascorr, category_names = category_names,
DirName = working_dir))
Proportions = do.call(what = calculate_proportion, args = calculate_proportion_args)
message("\n### Making plot of spatial indices")
Range = plot_range_index(Report = fit$Report, TmbData = fit$data_list,
Sdreport = fit$parameter_estimates$SD, Znames = colnames(fit$data_list$Z_xm),
PlotDir = working_dir, year_labels = year_labels,
years_to_plot = years_to_plot, use_biascorr = use_biascorr,
category_names = category_names)
message("\n### Making plot of range edges")
plot_maps_args = list()
plot_maps_args = combine_lists(input = plot_maps_args, default = list(fit = fit,
plot_set = plot_set, category_names = category_names,
PlotDF = map_list[["PlotDF"]], MapSizeRatio = map_list[["MapSizeRatio"]],
working_dir = working_dir, year_labels = year_labels,
years_to_plot = years_to_plot, legend_x = map_list[["Legend"]]$x/100,
legend_y = map_list[["Legend"]]$y/100, projargs = projargs,
n_cells = n_cells))
Dens_xt = do.call(what = plot_maps, args = plot_maps_args)
dev.off()
plot_factors_args = list()
plot_factors_args = combine_lists(input = plot_factors_args,
default = list(fit = fit, mapdetails_list = map_list,
projargs = projargs, n_cells = n_cells, RotationMethod = RotationMethod,
plotdir = working_dir, category_names = category_names))
Factors = do.call(what = plot_factors, args = plot_factors_args)
Factors = do.call(what = plot_factors, args = plot_factors_args)
plot_clusters_args = list()
plot_clusters_args = combine_lists(input = plot_clusters_args,
args_to_use = c(formalArgs(plot_clusters), formalArgs(plot_variable)),
default = list(fit = fit, year_labels = year_labels,
category_names = category_names, map_list = map_list,
working_dir = working_dir, n_cells = n_cells,
projargs = projargs))
Clusters = do.call(what = plot_clusters, args = plot_clusters_args)
# Clear workspace
rm(list=ls())
# Load libraries
library(tidyverse)
library(here)
library(DT)
library(FishStatsUtils)
library(sf)
library(raster)
library(terra)
library(nngeo)
library(data.table)
# Clear workspace
rm(list=ls())
# Load libraries
library(tidyverse)
library(here)
library(DT)
library(FishStatsUtils)
library(sf)
library(raster)
library(terra)
library(nngeo)
library(data.table)
library(beepr)
#list of SST dataframes
SSTdfs <- list.files(here("data-raw/gridded/sst_data/"), pattern = "*.rds")
# Create empty tibble to fill
stn_OISST <- tibble()
# Load station data
load(here("data/RData_Storage/surveys_habitat_agesep.RData"))
stations <- sfheaders::sf_to_df(survs_sf, fill=TRUE)
stations <- dplyr::select(stations, -c(sfg_id, point_id))
head(stations)
stations <- rename(stations, LON=x)
stations <- rename(stations, LAT=y)
rm(survs_sf)
# Create datestring to merge SST and OISST
stations$DATE <- as.POSIXct(stations$DATE,
format = "%m/%d/%Y %H:%M")
stations$month <- substr(stations$DATE, start=6, stop=7)
stations$day <- substr(stations$DATE, start=9, stop=10)
stations$yrmody <- paste0(stations$YEAR, stations$month, stations$day)
stations <- st_as_sf(stations, coords=c("LON", "LAT"),
na.fail=T)
stations <- subset(stations, YEAR > 1981)
# Initialize progress bar
pb <- txtProgressBar(min=0, max=length(SSTdfs), initial=0, char="=", style=3)
# Merge in year-based loops
for(df in SSTdfs){
# Call the number of the current .rds file in the vector of .rds files
t <- match(df, SSTdfs)
# Update progress bar
setTxtProgressBar(pb, t)
getTxtProgressBar(pb)
# Call annual .rds OISST file
sstdf <- readRDS(paste0(here("data-raw/gridded/sst_data/", df)))
# Create string of sampled years (removes cod data prior to 1982)
stationsyr <- stations %>%
filter(YEAR == unique(sstdf$year))
# Filter out OISST days not sampled for cod, convert to sf object
sstdf_survdays <- sstdf %>%
dplyr::mutate(yrmody = as.numeric(paste0(year, month, day)) )%>%
dplyr::filter(yrmody %in% unique(stationsyr$yrmody)) %>%
dplyr::mutate(year = as.numeric(year),
month = as.numeric(month),
day = as.numeric(day),
declon = Lon,
declat = Lat) %>%
dplyr::select(-Lon, -Lat) %>%
sf::st_as_sf(coords=c("declon","declat"), crs=4326, remove=FALSE)
# Join by nearest neighbor and date
yrdietOISST <- suppressMessages(do.call('rbind',
lapply(split(stationsyr,
1:nrow(stationsyr)),
function(x) {
st_join(x,
sstdf_survdays[sstdf_survdays$yrmody == unique(x$yrmody),],
join = st_nn, k = 1, progress = TRUE)
}
)))
# Bind one year of the loop to the initialized tibble
stn_OISST <- rbind(stn_OISST, yrdietOISST)
# Close segment of progress bar every loop
close(pb)
}
# Clear workspace
rm(list=ls())
# Load libraries
library(tidyverse)
library(here)
library(DT)
library(FishStatsUtils)
library(sf)
library(raster)
library(terra)
library(nngeo)
library(data.table)
library(beepr)
#list of SST dataframes
SSTdfs <- list.files(here("data-raw/gridded/sst_data/"), pattern = "*.rds")
# Create empty tibble to fill
stn_OISST <- tibble()
# Load station data
load(here("data/RData_Storage/surveys_habitat_agesep.RData"))
stations <- sfheaders::sf_to_df(survs_sf, fill=TRUE)
stations <- dplyr::select(stations, -c(sfg_id, point_id))
head(stations)
stations <- rename(stations, LON=x)
stations <- rename(stations, LAT=y)
rm(survs_sf)
# Create datestring to merge SST and OISST
stations$DATE <- as.POSIXct(stations$DATE,
format = "%m/%d/%Y %H:%M")
stations$month <- substr(stations$DATE, start=6, stop=7)
stations$day <- substr(stations$DATE, start=9, stop=10)
stations$yrmody <- paste0(stations$YEAR, stations$month, stations$day)
stations <- st_as_sf(stations, coords=c("LON", "LAT"),
na.fail=T)
stations <- subset(stations, YEAR > 1981)
