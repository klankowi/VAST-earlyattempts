rm(list=ls())
# Load library
library(tidyverse)
library(sf)
library(here)
library(TSP)
library(udunits2)
# Set seed
set.seed(5423)
# Set GGplot auto theme
theme_set(theme(plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"),
panel.grid.major = element_line(color='lightgray'),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(color='black', size=1, fill=NA),
legend.title = element_text(size=12),
legend.text = element_text(size=10),
legend.background = element_blank(),
axis.text.x=element_text(size=12),
axis.text.y=element_text(size=12),
axis.title.x=element_text(size=14),
axis.title.y=element_text(size=14, angle=90, vjust=2),
plot.title=element_text(size=16, hjust = 0, vjust = 1.2),
plot.caption=element_text(hjust=0, face='italic', size=12)))
# Load stations
stations <- read.csv(here('possible_tsplocs.csv'))
# Create depth strata
stations$BATHY.DEPTH <- stations$BATHY_DEPT * -1
stations$dep.strat[stations$BATHY.DEPTH < 110] <- 'shallow'
stations$dep.strat[stations$BATHY.DEPTH >= 110] <- 'deep'
stations <- dplyr::select(stations,
YEAR, LON, LAT,
endlon, endlat,
SURVEY, STRATUM,
DEPTH, BATHY.DEPTH, dep.strat,
BOTTOM_TYP, COND
)
table(stations$dep.strat, stations$SURVEY)
table(stations$COND, stations$SURVEY)
stations.start <- dplyr::select(stations,
SURVEY, dep.strat, COND,
LON, LAT)
stations.start$id <- seq(1:nrow(stations.start))
stations.start$loc <- 'start'
stations.start <- st_as_sf(stations.start,
coords=c('LON', 'LAT'))
st_crs(stations.start) <- 'EPSG:4326'
stations.end <- dplyr::select(stations,
SURVEY, dep.strat, COND,
endlon, endlat)
stations.end$id <- seq(1:nrow(stations.end))
stations.end$loc <- 'end'
stations.end <- st_as_sf(stations.end,
coords=c('endlon', 'endlat'))
st_crs(stations.end) <- 'EPSG:4326'
stations <- rbind(stations.start, stations.end)
stations$loc <- factor(stations$loc,
levels=c('start', 'end'))
stations$loc <- as.numeric(stations$loc)
stations <- stations[with(stations,
order(SURVEY, id, loc)),]
head(stations)
pts_line <- stations %>%
group_by(id) %>%
summarize(SURVEY = first(SURVEY),
dep.strat = first(dep.strat),
COND = first(COND), do_union=FALSE) %>%
st_cast("LINESTRING")
# Load coast
coast <- ecodata::coast
coast <- st_transform(coast, crs='EPSG:4326')
# Load Portland dock
portland <- data.frame(
lon = -70.255005,
lat = 43.651156,
SURVEY = 'Portland',
STRATUM = NA,
DEPTH = NA,
BATHY.DEPTH = NA,
dep.strat = NA,
BOTTOM_TYP = NA,
COND = NA)
portland <- st_as_sf(portland, coords=c('lon', 'lat'))
st_crs(portland) <- 'EPSG:4326'
# Plot basic
ggplot() +
geom_sf(data=coast) +
geom_sf(data=pts_line, cex=1,
aes(col=SURVEY)) +
geom_sf(data=portland) +
coord_sf(xlim=c(-71, -68.95),
ylim=c(41.95, 43.65)) +
ylab('Latitude') +
xlab('Longitude')
head(station)
head(stations)
# Split to surveys
blls <- subset(pts_line, SURVEY == "NEFSC BLLS" & pts_line$loc == 1)
# Split to surveys
blls <- subset(stations, SURVEY == "NEFSC BLLS" & stations$loc == 1)
bts <- subset(stations, SURVEY == 'NEFSC BTS' & stations$loc == 1)
# Check strata distribution
table(blls$dep.strat, blls$COND)
table(bts$dep.strat, bts$COND)
# Random selection
selecdf <- data.frame(
SURVEY = c(rep('NEFSC BLLS', 4), rep('NEFSC BTS', 4)),
dep.strat = rep(c('shallow', 'deep'), 4),
COND = rep(c('ROUGH', 'ROUGH', 'SMOOTH', 'SMOOTH'), 2)
)
selecdf.blls <- subset(selecdf, SURVEY == 'NEFSC BLLS')
selecdf.bts <- subset(selecdf, SURVEY == "NEFSC BTS")
rm(selecdf)
stations_blank$id <- NA
stations_blank <- stations[1,]
stations_blank$id <- NA
head(stations_blank)
stations_blank <- stations[1,]
stations_blank$id <- NA
for(i in 1:nrow(selecdf.blls)){
stratcombo <- subset(stations,
stations$SURVEY == selecdf.blls$SURVEY[i] &
stations$dep.strat == selecdf.blls$dep.strat[i] &
stations$COND == selecdf.blls$COND[i])
workingwith <- nrow(stratcombo)
message(i)
print(workingwith)
if(workingwith >= 25){
rowsuse <- seq(1, workingwith)
rowsuse <- sample(rowsuse, 25, replace=F)
stratcombo <- stratcombo[rowsuse,]
}
stations_blank <- rbind(stations_blank, stratcombo)
}
stations_blank <- stations_blank[!is.na(stations_blank$id),]
stations_blank
rm(list=ls())
# Load library
library(tidyverse)
library(sf)
library(here)
library(TSP)
library(udunits2)
# Set seed
set.seed(5423)
# Set GGplot auto theme
theme_set(theme(plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"),
panel.grid.major = element_line(color='lightgray'),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(color='black', size=1, fill=NA),
legend.title = element_text(size=12),
legend.text = element_text(size=10),
legend.background = element_blank(),
axis.text.x=element_text(size=12),
axis.text.y=element_text(size=12),
axis.title.x=element_text(size=14),
axis.title.y=element_text(size=14, angle=90, vjust=2),
plot.title=element_text(size=16, hjust = 0, vjust = 1.2),
plot.caption=element_text(hjust=0, face='italic', size=12)))
# Load stations
stations <- read.csv(here('possible_tsplocs.csv'))
# Create depth strata
stations$BATHY.DEPTH <- stations$BATHY_DEPT * -1
stations$dep.strat[stations$BATHY.DEPTH < 110] <- 'shallow'
stations$dep.strat[stations$BATHY.DEPTH >= 110] <- 'deep'
stations <- dplyr::select(stations,
YEAR, LON, LAT,
endlon, endlat,
SURVEY, STRATUM,
DEPTH, BATHY.DEPTH, dep.strat,
BOTTOM_TYP, COND
)
table(stations$dep.strat, stations$SURVEY)
table(stations$COND, stations$SURVEY)
stations.start <- dplyr::select(stations,
SURVEY, dep.strat, COND,
LON, LAT)
stations.start$id <- seq(1:nrow(stations.start))
stations.start$loc <- 'start'
stations.start <- st_as_sf(stations.start,
coords=c('LON', 'LAT'))
st_crs(stations.start) <- 'EPSG:4326'
stations.end <- dplyr::select(stations,
SURVEY, dep.strat, COND,
endlon, endlat)
rm(list=ls())
# Load library
library(tidyverse)
library(sf)
library(here)
library(TSP)
library(udunits2)
# Set seed
set.seed(5423)
# Set GGplot auto theme
theme_set(theme(plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"),
panel.grid.major = element_line(color='lightgray'),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(color='black', size=1, fill=NA),
legend.title = element_text(size=12),
legend.text = element_text(size=10),
legend.background = element_blank(),
axis.text.x=element_text(size=12),
axis.text.y=element_text(size=12),
axis.title.x=element_text(size=14),
axis.title.y=element_text(size=14, angle=90, vjust=2),
plot.title=element_text(size=16, hjust = 0, vjust = 1.2),
plot.caption=element_text(hjust=0, face='italic', size=12)))
# Load stations
stations <- read.csv(here('possible_tsplocs.csv'))
# Create depth strata
stations$BATHY.DEPTH <- stations$BATHY_DEPT * -1
stations$dep.strat[stations$BATHY.DEPTH < 110] <- 'shallow'
stations$dep.strat[stations$BATHY.DEPTH >= 110] <- 'deep'
stations <- dplyr::select(stations,
YEAR, LON, LAT,
endlon, endlat,
SURVEY, STRATUM,
DEPTH, BATHY.DEPTH, dep.strat,
BOTTOM_TYP, COND
)
table(stations$dep.strat, stations$SURVEY)
table(stations$COND, stations$SURVEY)
stations.start <- dplyr::select(stations,
SURVEY, dep.strat, COND,
LON, LAT)
stations.start$id <- seq(1:nrow(stations.start))
stations.start$loc <- 'start'
stations.start <- st_as_sf(stations.start,
coords=c('LON', 'LAT'))
st_crs(stations.start) <- 'EPSG:4326'
stations.end <- dplyr::select(stations,
SURVEY, dep.strat, COND,
endlon, endlat)
stations.end$id <- seq(1:nrow(stations.end))
stations.end$loc <- 'end'
stations.end <- st_as_sf(stations.end,
coords=c('endlon', 'endlat'))
st_crs(stations.end) <- 'EPSG:4326'
stations <- rbind(stations.start, stations.end)
stations$loc <- factor(stations$loc,
levels=c('start', 'end'))
stations$loc <- as.numeric(stations$loc)
stations <- stations[with(stations,
order(SURVEY, id, loc)),]
pts_line <- stations %>%
group_by(id) %>%
summarize(SURVEY = first(SURVEY),
dep.strat = first(dep.strat),
COND = first(COND), do_union=FALSE) %>%
st_cast("LINESTRING")
# Load coast
coast <- ecodata::coast
coast <- st_transform(coast, crs='EPSG:4326')
# Load Portland dock
portland <- data.frame(
lon = -70.255005,
lat = 43.651156,
SURVEY = 'Portland',
STRATUM = NA,
DEPTH = NA,
BATHY.DEPTH = NA,
dep.strat = NA,
BOTTOM_TYP = NA,
COND = NA)
portland <- st_as_sf(portland, coords=c('lon', 'lat'))
st_crs(portland) <- 'EPSG:4326'
# Plot basic
ggplot() +
geom_sf(data=coast) +
geom_sf(data=pts_line, cex=1,
aes(col=SURVEY)) +
geom_sf(data=portland) +
coord_sf(xlim=c(-71, -68.95),
ylim=c(41.95, 43.65)) +
ylab('Latitude') +
xlab('Longitude')
# Split to surveys
blls <- subset(stations, SURVEY == "NEFSC BLLS" & stations$loc == 1)
bts <- subset(stations, SURVEY == 'NEFSC BTS' & stations$loc == 1)
# Check strata distribution
table(blls$dep.strat, blls$COND)
table(bts$dep.strat, bts$COND)
# Random selection
selecdf <- data.frame(
SURVEY = c(rep('NEFSC BLLS', 4), rep('NEFSC BTS', 4)),
dep.strat = rep(c('shallow', 'deep'), 4),
COND = rep(c('ROUGH', 'ROUGH', 'SMOOTH', 'SMOOTH'), 2)
)
selecdf.blls <- subset(selecdf, SURVEY == 'NEFSC BLLS')
selecdf.bts <- subset(selecdf, SURVEY == "NEFSC BTS")
rm(selecdf)
stations_blank <- stations[1,]
stations_blank$id <- NA
for(i in 1:nrow(selecdf.blls)){
stratcombo <- subset(stations,
stations$SURVEY == selecdf.blls$SURVEY[i] &
stations$dep.strat == selecdf.blls$dep.strat[i] &
stations$COND == selecdf.blls$COND[i])
workingwith <- nrow(stratcombo)
message(i)
print(workingwith)
if(workingwith >= 25){
rowsuse <- seq(1, workingwith)
rowsuse <- sample(rowsuse, 25, replace=F)
stratcombo <- stratcombo[rowsuse,]
}
stations_blank <- rbind(stations_blank, stratcombo)
}
stations_blank <- stations_blank[!is.na(stations_blank$id),]
table(stations_blank$loc)
stations_blank <- stations[1,]
stations_blank$id <- NA
for(i in 1:nrow(selecdf.blls)){
stratcombo <- subset(stations[stations$loc == 1,],
stations$SURVEY == selecdf.blls$SURVEY[i] &
stations$dep.strat == selecdf.blls$dep.strat[i] &
stations$COND == selecdf.blls$COND[i])
workingwith <- nrow(stratcombo)
message(i)
print(workingwith)
if(workingwith >= 25){
rowsuse <- seq(1, workingwith)
rowsuse <- sample(rowsuse, 25, replace=F)
stratcombo <- stratcombo[rowsuse,]
}
stations_blank <- rbind(stations_blank, stratcombo)
}
stations_blank <- stations_blank[!is.na(stations_blank$id),]
table(stations_blank$loc)
stations_blank <- stations[1,]
stations_blank$id <- NA
for(i in 1:nrow(selecdf.blls)){
stratcombo <- subset(stations.start,
stations.start$SURVEY == selecdf.blls$SURVEY[i] &
stations.start$dep.strat == selecdf.blls$dep.strat[i] &
stations.start$COND == selecdf.blls$COND[i])
workingwith <- nrow(stratcombo)
message(i)
print(workingwith)
if(workingwith >= 25){
rowsuse <- seq(1, workingwith)
rowsuse <- sample(rowsuse, 25, replace=F)
stratcombo <- stratcombo[rowsuse,]
}
stations_blank <- rbind(stations_blank, stratcombo)
}
stations_blank <- stations_blank[!is.na(stations_blank$id),]
table(stations_blank$loc)
for(i in 1:nrow(selecdf.bts)){
stratcombo <- subset(stations.start,
stations.start$SURVEY == selecdf.bts$SURVEY[i] &
stations.start$dep.strat == selecdf.bts$dep.strat[i] &
stations.start$COND == selecdf.bts$COND[i])
workingwith <- nrow(stratcombo)
message(i)
print(workingwith)
if(workingwith >= 25){
rowsuse <- seq(1, workingwith)
rowsuse <- sample(rowsuse, 26, replace=F)
stratcombo <- stratcombo[rowsuse,]
}
if(workingwith < 25){
rowsuse <- seq(1, workingwith)
rowsuse <- sample(rowsuse, 22, replace=F)
stratcombo <- stratcombo[rowsuse,]
}
line_blank <- rbind(line_blank, stratcombo)
}
for(i in 1:nrow(selecdf.bts)){
stratcombo <- subset(stations.start,
stations.start$SURVEY == selecdf.bts$SURVEY[i] &
stations.start$dep.strat == selecdf.bts$dep.strat[i] &
stations.start$COND == selecdf.bts$COND[i])
workingwith <- nrow(stratcombo)
message(i)
print(workingwith)
if(workingwith >= 25){
rowsuse <- seq(1, workingwith)
rowsuse <- sample(rowsuse, 26, replace=F)
stratcombo <- stratcombo[rowsuse,]
}
if(workingwith < 25){
rowsuse <- seq(1, workingwith)
rowsuse <- sample(rowsuse, 22, replace=F)
stratcombo <- stratcombo[rowsuse,]
}
stations_blank <- rbind(stations_blank, stratcombo)
}
line_blank <- line_blank[!is.na(line_blank$id),]
stations_blank <- stations_blank[!is.na(stations_blank$id),]
table(stations_blank$SURVEY)
table(stations_blank$SURVEY, stations_blank$dep.strat)
table(stations_blank$SURVEY, stations_blank$COND)
# Great. These are our randomly selected points.
# Combine with Portland.
stations_blank <- rbind(portland, stations_blank)
portland
head(stations_blank)
colnames(portland)
colnames(station_blank)
colnames(stations_blank)
# Great. These are our randomly selected points.
# Combine with Portland.
portland <- dplyr::select(portland,
SURVEY, dep.strat, COND, geometry)
portland$id <- 'Portland'
portland$loc <- 'Portland'
stations_blank <- rbind(portland, stations_blank)
# Get distance matrix in nmi
dismat <- st_distance(stations_blank)
dismat <- ud.convert(dismat, 'm', 'nautical_mile')
dismat <- as.dist(dismat)
dismat <- TSP(dismat)
# Solve TSP 100 times
tour.list <- vector(mode='list', 5)
for(i in 1:length(tour.list)){
tour.list[[i]] <- solve_TSP(dismat, method="farthest_insertion")
}
test <- do.call(rbind, tour.list)
leng.list <- vector(mode='list', 5)
for(i in 1:length(leng.list)){
leng.list[[i]] <- tour_length(tour.list[[i]])
}
leng.df <- do.call(rbind, leng.list)
leng.df <- as.data.frame(leng.df)
names(leng.df) <- 'length'
leng.df$tourno <- seq(1, nrow(leng.df))
minlen <- rownames(leng.df[leng.df$length == min(leng.df$length),])
path <- c(cut_tour(tour.list[[as.numeric(minlen)]], 1, exclude_cut = FALSE), 1)
# Plot
ggplot() +
geom_sf(data = coast) +
geom_sf(data = stations_blank, aes(col=SURVEY)) +
geom_sf(data = st_sfc(
st_cast(
do.call(c, st_geometry(stations_blank[c(path),])),
'LINESTRING'
), crs = 4326
)) +
coord_sf(xlim=c(-71, -68.95),
ylim=c(41.95, 44)) +
ylab('Latitude') +
xlab('Longitude')
path
stations_blank
tour
tour.list[[as.numeric(minlen)]]
tour <- tour.list[[as.numeric(minlen)]]
path <- c(cut_tour(tour, 1, exclude_cut = FALSE), 1)
tour
View(tour)
head(tour)
as.numeric(tour)
tour.vec <- as.vector(tour)
stations_blank
stations_blank <- stations_blank[stations_blank$SURVEY !='Portland',]
tour
TSP(tour.vec)
rm(list=ls())
EndPt <- c(158.7,245.1,187.1,298.2,346.8,317.2,74.5,274.2,153.4,246.7,193.6,302.3,6.8,359.1,235.4,134.5,111.2,240.5,359.2,121.3,224.5,212.6,155.1,353.1,181.7,334,249.3,43.9,38.5,75.7,344.3,45.1,285.7,155.5,183.8,60.6,301,132.1,75.9,112,342.1,302.1,288.1,47.4,331.3,3.4,185.3,62,323.7,188,313.1,171.6,187.6,291.4,19.2,210.3,93.3,24.8,83.1,193.8,112.7,204.3,223.3,210.7,201.2,41.3,79.7,175.4,260.7,279.5,82.4,200.2,254.2,228.9,1.4,299.9,102.7,123.7,172.9,23.2,207.3,320.1,344.6,39.9,223.8,106.6,156.6,45.7,236.3,98.1,337.2,296.1,194,307.1,86.6,65.5,86.6,296.4,94.7,279.9)
StPt <- c(56.3,158.1,82.4,185.5,243.9,195.6,335,167,39.4,151.7,99.8,177.2,246.8,266.1,118.2,358.6,357.9,99.6,209.9,342.8,106.5,86.4,35.7,200.6,65.6,212.5,159.1,297,285.9,300.9,177,245.2,153.1,8.1,76.5,322.4,190.8,35.2,342.6,8.8,244.6,202,176.2,308.3,184.2,267.2,26.6,293.8,167.3,30.5,176,74.3,96.9,186.7,288.2,62.6,331.4,254.7,324.1,73.4,16.4,64,110.9,74.4,69.8,298.8,336.6,58.8,170.1,173.2,330.8,92.6,129.2,124.7,262.3,140.4,321.2,34,79.5,263,66.4,172.8,205.5,288,98.5,335.2,38.7,289.7,112.7,350.7,243.2,185.4,63.9,170.3,326.3,322.9,320.6,199.2,287.1,158.1)
EndID <- c(seq(1, 100, 1))
StID <- c(seq(1, 100, 1))
df <- cbind.data.frame(StPt, StID, EndPt, EndID)
#install.packages("TSP")
library(TSP)
library(dplyr)
# Dataframe
df <- cbind.data.frame(StPt, StID, EndPt, EndID)
# filter to 6 example nodes for requested comparison
df = df %>% filter(StID %in% c(1,3,4,5,8,10))
# distance calculation
transec_distance = function(end,start){
abs_dist = abs(start-end)
ifelse(360-abs_dist > 180, abs_dist, 360-abs_dist)
}
# distance matrix
matrix_distance = matrix(data = NA, nrow = nrow(df), ncol = nrow(df))
for(start_id in 1:nrow(df)){
start_point = df[start_id,'StPt']
for(end_id in 1:nrow(df)){
end_point = df[end_id,'EndPt']
matrix_distance[end_id,start_id] = transec_distance(end_point, start_point)
}
}
answer = solve_TSP(as.ATSP(matrix_distance))
# get length of cycle
print(answer)
# sort df to same order as solution
df_w_answer = df[as.numeric(answer),]
# add info about next transect to each transect
df_w_answer = df_w_answer %>%
mutate(visit_order = 1:nrow(df_w_answer)) %>%
mutate(next_StID = lead(StID, order_by = visit_order),
next_StPt = lead(StPt, order_by = visit_order))
# add info about next transect to each transect (for final transect)
df_w_answer[df_w_answer$visit_order == nrow(df_w_answer),'next_StID'] =
df_w_answer[df_w_answer$visit_order == 1,'StID']
df_w_answer[df_w_answer$visit_order == nrow(df_w_answer),'next_StPt'] =
df_w_answer[df_w_answer$visit_order == 1,'StPt']
# compute distance between end of each transect and start of next
df_w_answer = df_w_answer %>% mutate(dist_between = transec_distance(EndPt, next_StPt))
answer
path <- c(cut_tour(answer, 1, exclude_cut = FALSE), 1)
df
df_w_answer
head(df)
df
matrix_distance
